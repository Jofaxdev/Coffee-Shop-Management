@using System.Security.Claims

@{
    ViewData["Title"] = "Quản lý Khu vực & Bàn";
}

<div id="audio-activation-overlay">
    <div class="content">
        <i class="fas fa-volume-up fa-3x"></i>
        <p>Nhấp vào đây để bật âm thanh cho các yêu cầu mới.</p>
    </div>
</div>


<div class="container-fluid" id="pageContainer">
    @Html.AntiForgeryToken()

    <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
        <h4 class="mb-0 card-title fw-semibold">Khu vực & Bàn</h4>
        <div class="ms-auto d-flex gap-2">
            <button id="showAddAreaModalBtn" class="btn btn-success" title="Thêm khu vực mới">
                <i class="fas fa-plus me-1"></i>
                <span class="d-none d-md-inline">Thêm Khu vực</span>
            </button>
            <button id="showAddTableModalBtn" class="btn btn-primary" title="Thêm bàn mới" style="display: none;">
                <i class="fas fa-plus me-1"></i>
                <span class="d-none d-md-inline">Thêm Bàn</span>
            </button>
            <button id="sortModeBtn" class="btn btn-info" title="Bật/Tắt chế độ sắp xếp">
                <i class="fas fa-sort me-1"></i>
                <span class="d-none d-md-inline">Sắp xếp</span>
            </button>
        </div>
    </div>


    <div class="row">
        <div class="col-12 col-lg-4 col-xl-3 mb-4 mb-lg-0">
            <div class="card shadow-sm h-100" id="areaCard">
                <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
                    <h5 class="mb-0 card-title fw-semibold"><i class="fas fa-map-marked-alt me-2 text-primary"></i>Danh sách Khu vực</h5>
                </div>
                <div class="card-body p-2">
                    <div id="areaList" class="list-group list-group-flush">
                    </div>
                </div>
                <div id="areaFooter" class="card-footer text-center text-muted small bg-light edit-mode-item">
                    Kéo <i class="fas fa-grip-vertical"></i> để sắp xếp hoặc kéo bàn vào đây
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-8 col-xl-9">
            <div class="card shadow-sm h-100" id="tableCard">
                <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
                    <h5 id="tableListHeader" class="mb-0 card-title fw-semibold text-muted">
                        <i class="fas fa-columns me-2"></i>Bàn
                    </h5>
                </div>
                <div class="card-body bg-light" id="tableGridContainer">
                    <div id="tableDisplayArea">
                        <div id="tableGrid" class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-4 row-cols-xxl-5 g-4 d-none d-lg-flex"></div>
                        <div id="tableList" class="list-group d-lg-none"></div>
                        <div id="tableEmptyState" class="empty-state-container" style="display: block;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" fill="currentColor" class="bi bi-arrow-left-circle mb-3" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z" /></svg>
                            <h5>Hãy chọn một khu vực để xem bàn</h5>
                        </div>
                    </div>
                </div>
                <div id="tableGridFooter" class="card-footer text-center text-muted small bg-light edit-mode-item">
                    Kéo thả để sắp xếp
                </div>
            </div>
        </div>
    </div>
</div>

@* Các Modal không thay đổi *@
<div class="modal fade" id="areaModal" tabindex="-1" aria-labelledby="areaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="areaModalLabel">Thêm Khu vực mới</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="areaFormContainer">
                    <div class="mb-3">
                        <label for="modalAreaCode" class="form-label">Mã Khu vực <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="modalAreaCode" name="AreaCode" required maxlength="50" autocomplete="off" placeholder="VD: SAN_VUON, TANG_1">
                        <div class="invalid-feedback">Vui lòng nhập mã khu vực.</div>
                    </div>
                    <div class="mb-3">
                        <label for="modalAreaName" class="form-label">Tên Khu vực <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="modalAreaName" name="Name" required maxlength="100" autocomplete="off">
                        <div class="invalid-feedback">Vui lòng nhập tên khu vực.</div>
                    </div>
                    <div class="mb-3">
                        <label for="modalAreaDescription" class="form-label">Mô tả</label>
                        <textarea class="form-control" id="modalAreaDescription" name="Description" rows="3" maxlength="250"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Trạng thái <span class="text-danger">*</span></label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="IsActive" id="modalAreaIsActiveTrue" value="true" required checked>
                            <label class="form-check-label" for="modalAreaIsActiveTrue">Hoạt động</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="IsActive" id="modalAreaIsActiveFalse" value="false" required>
                            <label class="form-check-label" for="modalAreaIsActiveFalse">Không hoạt động</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="saveAreaBtn">Lưu</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="tableModal" tabindex="-1" aria-labelledby="tableModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tableModalLabel">Thêm Bàn mới</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="tableFormContainer">
                    <div class="mb-3">
                        <label for="modalTableCode" class="form-label">Mã Bàn <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="modalTableCode" name="TableCode" required maxlength="50" autocomplete="off" placeholder="VD: B01, VIP02">
                        <div class="invalid-feedback">Vui lòng nhập mã bàn.</div>
                    </div>
                    <div class="mb-3">
                        <label for="modalTableName" class="form-label">Tên Bàn <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="modalTableName" name="NameTable" required maxlength="50" autocomplete="off">
                        <div class="invalid-feedback">Vui lòng nhập tên bàn.</div>
                    </div>
                    <div class="mb-3">
                        <label for="modalTableAreaCodeSelect" class="form-label">Thuộc Khu vực</label>
                        <select id="modalTableAreaCodeSelect" name="AreaCode" class="form-select" required></select>
                        <div class="invalid-feedback">Vui lòng chọn khu vực.</div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <label class="form-label">Trạng thái Hoạt động<span class="text-danger">*</span></label><br>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="IsActive" id="modalTableIsActiveTrue" value="true" required checked>
                                <label class="form-check-label" for="modalTableIsActiveTrue">Hoạt động</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="IsActive" id="modalTableIsActiveFalse" value="false" required>
                                <label class="form-check-label" for="modalTableIsActiveFalse">Tắt</label>
                            </div>
                        </div>
                        <div class="col-6">
                            <label class="form-label">Trạng thái Bàn<span class="text-danger">*</span></label><br>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="IsAvailable" id="modalTableIsAvailableTrue" value="true" required checked>
                                <label class="form-check-label" for="modalTableIsAvailableTrue">Trống</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="IsAvailable" id="modalTableIsAvailableFalse" value="false" required>
                                <label class="form-check-label" for="modalTableIsAvailableFalse">Có khách</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="saveTableBtn">Lưu</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        #audio-activation-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); color: white; display: flex; justify-content: center; align-items: center; z-index: 2000; cursor: pointer; backdrop-filter: blur(5px); transition: opacity 0.3s ease; }
        #audio-activation-overlay .content { text-align: center; animation: fadeIn-scale 0.5s ease-out; }
        #audio-activation-overlay p { font-size: 1.2rem; margin-top: 1rem; }
        @@keyframes fadeIn-scale { from { opacity: 0; transform: scale(0.9); } to { opacity: 1; transform: scale(1); } }
        :root { --app-color-1: #5D87FF; --app-color-2: #13DEB9; --app-color-3: #FFB822; --app-color-4: #7B6FFF; --app-color-5: #FA896B; --card-border-color: #e5e9f2; --body-bg-light: #f1f5f9; --drop-target-bg: #e0f7fa; --drop-target-border: #00bcd4; }
        .truncate-text { display: block; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 100%; }
        .card { border-color: var(--card-border-color); }
        #tableGridContainer { background-color: var(--body-bg-light) !important; }
        .edit-mode-item { display: none !important; }
        body.is-edit-mode .edit-mode-item { display: flex !important; }
        body.is-edit-mode #areaFooter, body.is-edit-mode #tableGridFooter { display: block !important; }
        #sortModeBtn.active { background-color: var(--app-color-1) !important; color: white !important; border-color: var(--app-color-1) !important; }
        #areaList .list-group-item.drop-target-highlight:not(.active) { background-color: var(--drop-target-bg) !important; border-left-color: var(--drop-target-border) !important; }
        .list-group-item.border-danger, .table-card.border-danger { border-width: 2px !important; border-color: #dc3545 !important; }
        .item-inactive { opacity: 0.6; transition: opacity 0.2s ease-in-out; }
        .item-inactive:hover { opacity: 1; }
        #areaList .list-group-item { padding: 1rem 1.25rem; font-size: 1rem; border-left: 4px solid transparent; border-radius: 0.375rem; margin-bottom: 0.25rem; border-top-width: 1px !important; transition: all 0.2s ease-in-out; border-color: transparent; }
        .list-group-item .handle { cursor: grab; color: #adb5bd; margin-right: 15px; transition: color 0.2s; }
        .list-group-item:hover .handle { color: #495057; }
        .list-group-item.active { background-color: var(--app-color-1) !important; border-color: var(--app-color-1) !important; color: white; font-weight: 600; }
        .list-group-item.active .badge { background-color: rgba(255,255,255,0.2) !important; color: white !important; }
        .list-group-item-action:hover:not(.active) { background-color: #e9ecef !important; }
        #areaList .list-group-item:nth-child(5n + 1) { border-left-color: var(--app-color-1); }
        #areaList .list-group-item:nth-child(5n + 2) { border-left-color: var(--app-color-2); }
        #areaList .list-group-item:nth-child(5n + 3) { border-left-color: var(--app-color-3); }
        #areaList .list-group-item:nth-child(5n + 4) { border-left-color: var(--app-color-4); }
        #areaList .list-group-item:nth-child(5n + 5) { border-left-color: var(--app-color-5); }
        .action-menu-btn { background: none; border: none; color: #6c757d; padding: 0.25rem 0.5rem; border-radius: 0.375rem; }
        .action-menu-btn:hover { color: #000; background-color: #e9ecef; }
        .list-group-item.active .action-menu-btn { color: white; }
        .table-card { border: 1px solid var(--card-border-color); border-radius: 0.75rem; box-shadow: 0 1px 3px rgba(0,0,0,0.04); transition: all 0.2s ease; background-color: #fff; position: relative; }
        body.is-edit-mode .table-card { cursor: grab; }
        body.is-edit-mode .table-card:hover { transform: translateY(-4px); box-shadow: 0 6px 20px rgba(0,0,0,0.08); border-color: var(--app-color-1); }
        .table-card .card-body { padding: 1rem; text-align: left; }
        .table-card-title { font-weight: 600; font-size: 1rem; margin-bottom: 0.1rem; }
        .table-card-code { font-size: 0.8rem; color: #6c757d; margin-bottom: 0.75rem; }
        .table-card .action-menu-container { position: absolute; top: 0.5rem; right: 0.5rem; z-index: 3; }
        .table-card-status .badge { font-size: 0.85rem; }
        #tableList .list-group-item { align-items: center; }
        #tableList .status-dot { width: 12px; height: 12px; border-radius: 50%; margin-right: 12px; flex-shrink: 0; }
        .empty-state-container { display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; height: 100%; color: #6c757d; padding: 2rem; }
        .empty-state-container p { max-width: 350px; }
        .loading-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.85); backdrop-filter: blur(2px); z-index: 10; display: flex; justify-content: center; align-items: center; border-radius: 7px; }
        
        .table-card-request-icon { position: absolute; top: 1rem; right: 1rem; font-size: 1.5rem; z-index: 2; text-shadow: 0 0 5px rgba(0,0,0,0.5); }
        .list-view-request-icon { font-size: 1.2rem; margin-left: 10px; }
        .table-card-request-icon i, .list-view-request-icon i { pointer-events: none; }
        .request-order { color: #ffc107; animation: ring-animation 1.5s ease-in-out infinite; }
        .request-payment { color: #28a745; animation: beat-animation 1.2s ease-in-out infinite; }
        @@keyframes ring-animation { 0%, 100% { transform: rotate(0); } 10%, 30%, 50%, 70%, 90% { transform: rotate(-10deg); } 20%, 40%, 60%, 80% { transform: rotate(10deg); } }
        @@keyframes beat-animation { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.2); } }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

    <script>
        (function ($) {
            "use strict";

            // --- KHAI BÁO BIẾN TOÀN CỤC ---
            let notificationSound;
            let isAudioEnabled = false;
            let csrfToken, notyf, Swal;
            let currentSelectedAreaCode = null, currentSelectedAreaName = null;
            let areaSortable, tableSortableGrid, tableSortableList;
            let isInEditMode = false;
            let areaModal, tableModal;
            let signalRConnection;
            let isAreaLoading = false, isTableLoading = false;

            // --- CÁC HÀM KHỞI TẠO VÀ TIỆN ÍCH ---
            function initializeAudio() {
                try {
                    notificationSound = new Audio('/sound/bell.wav');
                    notificationSound.volume = 0.7;
                    notificationSound.play().then(() => notificationSound.pause()).catch(() => { });
                    isAudioEnabled = true;
                    console.log("Âm thanh đã được người dùng kích hoạt.");
                } catch (e) {
                    isAudioEnabled = false;
                    console.error("Không thể khởi tạo âm thanh:", e);
                }
            }

            function appendConnectionId(data) {
                if (signalRConnection && signalRConnection.state === "Connected") {
                    const connectionId = signalRConnection.connectionId;
                    if (data instanceof URLSearchParams || data instanceof FormData) {
                        data.append('__ConnectionId', connectionId);
                    } else if (typeof data === 'object' && data !== null) {
                        data.__ConnectionId = connectionId;
                    }
                }
                return data;
            }

            async function handleMoveTable(tableCode, newAreaCode) {
                let formData = new URLSearchParams();
                formData.append('tableCode', tableCode);
                formData.append('newAreaCode', newAreaCode);
                formData = appendConnectionId(formData);
                try {
                    const response = await fetch('/Admin/AreaTable/MoveTableToArea', { method: 'POST', headers: { 'RequestVerificationToken': csrfToken }, body: formData });
                    const result = await response.json();
                    if (result.success) {
                        notyf.success(result.message);
                        await loadAreas();
                    } else {
                        notyf.error(result.message || "Di chuyển bàn thất bại.");
                        await loadAreas();
                    }
                } catch (error) {
                    handleAjaxError(error, "di chuyển bàn");
                    await loadAreas();
                }
            }

            async function handleSave(type) {
                const isArea = type === 'area';
                const form = $(isArea ? '#areaFormContainer' : '#tableFormContainer');
                if (!form[0].checkValidity()) { form.addClass('was-validated'); return; }
                const mode = $(isArea ? '#areaModal' : '#tableModal').data('mode');
                const code = $(isArea ? '#modalAreaCode' : '#modalTableCode').val();
                const url = isArea ? (mode === 'edit' ? `/Admin/AreaTable/EditArea/${code}` : '/Admin/AreaTable/CreateArea') : (mode === 'edit' ? `/Admin/AreaTable/EditTable/${code}` : '/Admin/AreaTable/CreateTable');
                let formData = new FormData(form[0]);
                formData = appendConnectionId(formData);
                try {
                    const response = await fetch(url, { method: 'POST', headers: { 'RequestVerificationToken': csrfToken }, body: new URLSearchParams(formData) });
                    const result = await response.json();
                    if (result.success) { (isArea ? areaModal : tableModal).hide(); notyf.success(result.message); loadAreas(); } else { notyf.error(result.message || 'Lưu thất bại'); }
                } catch (error) { handleAjaxError(error, 'lưu dữ liệu'); }
            }

            function handleDelete(type, code, name) {
                const isArea = type === 'area';
                const title = isArea ? 'Xác nhận xóa Khu vực' : 'Xác nhận xóa Bàn';
                const html = `Bạn có chắc muốn xóa vĩnh viễn <strong>${name}</strong>?<br/><strong class='text-danger'>Hành động này không thể hoàn tác.</strong>`;
                const url = isArea ? '/Admin/AreaTable/DeleteArea' : '/Admin/AreaTable/DeleteTable';
                let formData = new URLSearchParams();
                if (isArea) { formData.append('areaCode', code); } else { formData.append('tableCode', code); }
                formData = appendConnectionId(formData);
                Swal.fire({ title: title, html: html, icon: 'warning', showCancelButton: true, confirmButtonText: 'Xóa', cancelButtonText: 'Hủy', reverseButtons: true, customClass: { confirmButton: 'btn btn-danger ms-2', cancelButton: 'btn btn-secondary' }, buttonsStyling: false }).then(result => {
                    if (result.isConfirmed) {
                        fetch(url, { method: 'POST', headers: { 'RequestVerificationToken': csrfToken }, body: formData })
                            .then(response => response.json())
                            .then(res => {
                                if (res.success) { notyf.success(res.message); if (isArea && code === currentSelectedAreaCode) { currentSelectedAreaCode = null; currentSelectedAreaName = null; } loadAreas(); } else { notyf.error(res.message); }
                            })
                            .catch(error => handleAjaxError(error, 'xóa'));
                    }
                });
            }

            async function handleClearRequest(tableCode) {
                try {
                    const response = await fetch('/api/TableRequest/Service', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ tableCode: tableCode, requestType: 'Clear' }) });
                    const result = await response.json();
                    if (response.ok) { notyf.success(`Đã xóa yêu cầu của bàn ${tableCode}.`); } else { notyf.error(result.message || 'Xóa yêu cầu thất bại.'); }
                } catch (error) { handleAjaxError(error, 'xóa yêu cầu'); }
            }

            async function checkConcurrencyBeforeEdit(itemElement, type) {
                const isArea = type === 'area';
                const code = isArea ? itemElement.data('areacode') : itemElement.data('tablecode');
                const localTimestamp = itemElement.data('updatedat');
                const url = isArea ? `/Admin/AreaTable/GetAreaDetails/${code}` : `/Admin/AreaTable/GetTableDetails/${code}`;
                const setupModalFunc = isArea ? setupAreaModal : setupTableModal;
                try {
                    const response = await fetch(url);
                    if (!response.ok) throw new Error('Không thể lấy dữ liệu mới nhất.');
                    const latestData = await response.json();
                    const serverTimestamp = latestData.updatedAt;
                    if (localTimestamp && localTimestamp !== serverTimestamp) {
                        notyf.error('Dữ liệu này vừa được người khác cập nhật! Trang sẽ tự động làm mới.');
                        itemElement.addClass('border-danger');
                        setTimeout(() => { if (isArea) loadAreas(); else loadTables(currentSelectedAreaCode); }, 2000);
                    } else {
                        setupModalFunc('edit', latestData);
                    }
                } catch (error) { handleAjaxError(error, "kiểm tra dữ liệu"); }
            }

            function safeDestroySortable(instance) { if (instance && typeof instance.destroy === 'function') { if (instance.el && document.body.contains(instance.el)) { instance.destroy(); } } return null; }
            function destroyAreaSortable() { areaSortable = safeDestroySortable(areaSortable); }
            function destroyTableSortables() { tableSortableGrid = safeDestroySortable(tableSortableGrid); tableSortableList = safeDestroySortable(tableSortableList); }
            function cleanupPage() { destroyAreaSortable(); destroyTableSortables(); $('#sortModeBtn, #showAddAreaModalBtn, #showAddTableModalBtn, #saveAreaBtn, #saveTableBtn, #areaList, #tableGridContainer, #audio-activation-overlay').off(); currentSelectedAreaCode = null; currentSelectedAreaName = null; isInEditMode = false; if (signalRConnection) { signalRConnection.stop(); } }
            function showLoading(selector) { const target = $(selector); if (target.length === 0) return; const timer = setTimeout(() => { if (target.css('position') === 'static') { target.css('position', 'relative'); } if (target.find('.loading-overlay').length === 0) { target.append('<div class="loading-overlay"><div class="spinner-border text-primary" role="status"></div></div>'); } }, 300); target.data('loading-timer', timer); }
            function hideLoading(selector) { const target = $(selector); if (target.length === 0) return; const timer = target.data('loading-timer'); if (timer) { clearTimeout(timer); target.removeData('loading-timer'); } setTimeout(() => { target.find('.loading-overlay').remove(); }, 100); }
            function handleAjaxError(error, actionText) { hideLoading('#areaCard'); hideLoading('#tableCard'); let errorMsg = `Không thể ${actionText.toLowerCase()}.`; if (typeof error === 'string') { errorMsg = error; } else if (error.responseJSON?.message) { errorMsg = error.responseJSON.message; } else if (error.message) { errorMsg = error.message; } notyf.error(errorMsg); }
            function setEditMode(isEdit) { isInEditMode = isEdit; $('body').toggleClass('is-edit-mode', isEdit); const sortButton = $('#sortModeBtn'); if (isEdit) { sortButton.removeClass('btn-info').addClass('btn-primary active'); } else { sortButton.removeClass('btn-primary active').addClass('btn-info'); } sortButton.find('span').text(isEdit ? 'Hoàn tất' : 'Sắp xếp'); if (areaSortable) areaSortable.option('disabled', !isEdit); if (tableSortableGrid) tableSortableGrid.option('disabled', !isEdit); if (tableSortableList) tableSortableList.option('disabled', !isEdit); }

            function updateRequestIcon(tableCode, requestStatus) { const tableElements = $(`[data-tablecode="${tableCode}"]`); if (tableElements.length === 0) return; let iconHtml = ''; let iconClass = ''; switch (requestStatus) { case 1: iconClass = 'fas fa-bell request-order'; iconHtml = `<i class="${iconClass}" title="Yêu cầu gọi món"></i>`; break; case 2: iconClass = 'fas fa-credit-card request-payment'; iconHtml = `<i class="${iconClass}" title="Yêu cầu thanh toán"></i>`; break; } tableElements.find('.table-card-request-icon').html(iconHtml); tableElements.find('.list-view-request-icon').html(iconHtml); }
            function renderAreaList(areas) { const areaListEl = $('#areaList'); areaListEl.empty(); if (!areas || areas.length === 0) { areaListEl.html(`<div class="empty-state-container"><h6 class="fw-normal">Chưa có khu vực nào</h6><p class="small">Nhấn "Thêm Khu vực" để tạo.</p></div>`); return; } areas.forEach(area => { const inactiveClass = !area.isActive ? 'item-inactive' : ''; areaListEl.append(`<div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center ${inactiveClass}" data-areacode="${area.areaCode}" data-areaname="${area.name}" data-isactive="${area.isActive}" data-updatedat="${area.updatedAt}"><div class="d-flex align-items-center" style="cursor: pointer; min-width: 0;"><i class="fas fa-grip-vertical handle edit-mode-item"></i><span class="ms-2 truncate-text" title="${area.name}">${area.name}</span></div><div class="d-flex align-items-center flex-shrink-0"><span class="badge bg-secondary-subtle text-secondary-emphasis rounded-pill me-3">${area.tableCount} bàn</span><div class="dropdown"><button class="btn btn-sm action-menu-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-ellipsis-v"></i></button><ul class="dropdown-menu dropdown-menu-end"><li><a class="dropdown-item edit-area-btn" href="#"><i class="fas fa-edit fa-fw me-2"></i>Sửa thông tin</a></li><li><a class="dropdown-item delete-area-btn text-danger" href="#"><i class="fas fa-trash fa-fw me-2"></i>Xóa khu vực</a></li></ul></div></div></div>`); }); }
            function renderTableViews(tables) { const tableGridEl = $('#tableGrid').empty(); const tableListEl = $('#tableList').empty(); const emptyStateEl = $('#tableEmptyState'); if (tables === null) { emptyStateEl.find('h5').text("Hãy chọn một khu vực để xem bàn"); emptyStateEl.show(); tableGridEl.hide(); tableListEl.hide(); return; } if (tables.length === 0) { emptyStateEl.find('h5').text("Khu vực này chưa có bàn"); emptyStateEl.show(); tableGridEl.hide(); tableListEl.hide(); return; } emptyStateEl.hide(); tableGridEl.show(); tableListEl.show(); tables.forEach(table => { const inactiveClass = !table.isActive ? 'item-inactive' : ''; let statusClass, statusText; if (table.isAvailable) { statusClass = 'success'; statusText = 'Trống'; } else { statusClass = 'warning'; statusText = 'Có khách'; } const dropdownMenuItems = `<li><a class="dropdown-item edit-table-btn" href="#"><i class="fas fa-edit fa-fw me-2"></i>Sửa</a></li><li><a class="dropdown-item clear-request-btn" href="#"><i class="fas fa-broom fa-fw me-2"></i>Xóa yêu cầu</a></li><li><hr class="dropdown-divider"></li><li><a class="dropdown-item delete-table-btn text-danger" href="#"><i class="fas fa-trash fa-fw me-2"></i>Xóa</a></li>`; const cardHtml = `<div class="col ${inactiveClass}" data-tablecode="${table.tableCode}" data-tablename="${table.nameTable}" data-updatedat="${table.updatedAt}"><div class="card h-100 table-card"><div class="table-card-request-icon"></div><div class="action-menu-container dropdown"><button class="btn btn-sm action-menu-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-ellipsis-v"></i></button><ul class="dropdown-menu dropdown-menu-end">${dropdownMenuItems}</ul></div><div class="card-body"><h6 class="table-card-title text-dark truncate-text" title="${table.nameTable}">${table.nameTable}</h6><p class="table-card-code truncate-text" title="${table.tableCode}">${table.tableCode}</p><div class="table-card-status"><span class="badge text-bg-${statusClass} w-100 py-2">${statusText}</span></div></div></div></div>`; const listItemHtml = `<div class="list-group-item d-flex justify-content-between ${inactiveClass}" data-tablecode="${table.tableCode}" data-tablename="${table.nameTable}" data-updatedat="${table.updatedAt}"><div class="d-flex align-items-center" style="min-width: 0;"><i class="fas fa-grip-vertical handle edit-mode-item me-3"></i><div class="status-dot bg-${statusClass}"></div><div style="min-width: 0;"><div class="fw-bold truncate-text" title="${table.nameTable}">${table.nameTable}</div><small class="text-muted truncate-text" title="${table.tableCode} - ${statusText}">${table.tableCode} - ${statusText}</small></div><div class="list-view-request-icon ms-2"></div></div><div class="dropdown flex-shrink-0"><button class="btn btn-sm action-menu-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-ellipsis-v"></i></button><ul class="dropdown-menu dropdown-menu-end">${dropdownMenuItems}</ul></div></div>`; tableGridEl.append(cardHtml); tableListEl.append(listItemHtml); if (table.request && table.request > 0) { updateRequestIcon(table.tableCode, table.request); } }); }

            function setupAreaModal(mode, areaData) { const form = $('#areaFormContainer'); form[0].reset(); form.removeClass('was-validated'); $('#modalAreaCode').prop('readonly', mode === 'edit'); $('#areaModal').data('mode', mode); if (mode === 'edit') { $('#areaModalLabel').text('Chỉnh sửa Khu vực'); $('#modalAreaCode').val(areaData.areaCode); $('#modalAreaName').val(areaData.name); $('#modalAreaDescription').val(areaData.description); $(`input[name="IsActive"][value="${areaData.isActive.toString()}"]`, form).prop('checked', true); areaModal.show(); } else { $('#areaModalLabel').text('Thêm Khu vực mới'); areaModal.show(); } }
            function setupTableModal(mode, tableData) { const form = $('#tableFormContainer'); form[0].reset(); form.removeClass('was-validated'); $('#modalTableCode').prop('readonly', mode === 'edit'); $('#tableModal').data('mode', mode); const areaSelect = $('#modalTableAreaCodeSelect'); areaSelect.empty(); $('#areaList .list-group-item').each(function () { const code = $(this).data('areacode'); const name = $(this).data('areaname'); const isActive = $(this).data('isactive'); if (code && name && isActive) { areaSelect.append(new Option(name, code)); } }); if (mode === 'edit') { $('#tableModalLabel').text('Chỉnh sửa Bàn'); if (areaSelect.find(`option[value="${tableData.areaCode}"]`).length === 0) { const inactiveArea = $(`#areaList .list-group-item[data-areacode="${tableData.areaCode}"]`); if (inactiveArea.length > 0) { areaSelect.append(new Option(inactiveArea.data('areaname'), inactiveArea.data('areacode'))); } } $('#modalTableCode').val(tableData.tableCode); $('#modalTableName').val(tableData.nameTable); areaSelect.val(tableData.areaCode); $(`input[name="IsActive"][value="${tableData.isActive.toString()}"]`, form).prop('checked', true); $(`input[name="IsAvailable"][value="${tableData.isAvailable.toString()}"]`, form).prop('checked', true); tableModal.show(); } else { $('#tableModalLabel').text('Thêm Bàn mới'); areaSelect.val(currentSelectedAreaCode); tableModal.show(); } }

            async function loadTables(areaCode) { if (isTableLoading) return; isTableLoading = true; showLoading('#tableCard'); destroyTableSortables(); try { const response = await fetch(`/Admin/AreaTable/GetTablesByArea?areaCode=${areaCode}`); if (!response.ok) { throw new Error(`Lỗi server: ${response.statusText}`); } const contentType = response.headers.get("content-type"); if (contentType && contentType.indexOf("application/json") !== -1) { const tables = await response.json(); renderTableViews(tables); initTableSortables(areaCode); $('#tableGridFooter').toggle(tables.length > 0 && isInEditMode); } else { throw new Error("Dữ liệu trả về không hợp lệ."); } } catch (error) { handleAjaxError(error, 'tải danh sách bàn'); renderTableViews([]); } finally { hideLoading('#tableCard'); isTableLoading = false; } }
            async function loadAreas() { if (isAreaLoading) return; isAreaLoading = true; showLoading('#areaCard'); try { const response = await fetch('/Admin/AreaTable/GetAreas'); if (!response.ok) throw response; const areas = await response.json(); renderAreaList(areas); initAreaSortable(); if (currentSelectedAreaCode) { const activeArea = $(`#areaList .list-group-item[data-areacode="${currentSelectedAreaCode}"]`); if (activeArea.length) { activeArea.addClass('active'); await loadTables(currentSelectedAreaCode); } else { currentSelectedAreaCode = null; currentSelectedAreaName = null; $('#tableListHeader').html('<i class="fas fa-columns me-2"></i>Bàn').addClass('text-muted'); renderTableViews(null); $('#showAddTableModalBtn').hide(); } } else if (areas && areas.length > 0) { const firstArea = $('#areaList .list-group-item:first'); if (firstArea.length) firstArea.trigger('click'); } else { renderTableViews(null); $('#tableListHeader').html('<i class="fas fa-columns me-2"></i>Bàn').addClass('text-muted'); $('#showAddTableModalBtn').hide(); } } catch (error) { handleAjaxError(error, 'tải danh sách khu vực'); } finally { hideLoading('#areaCard'); isAreaLoading = false; } }

            function initAreaSortable() { destroyAreaSortable(); const el = document.getElementById('areaList'); if (el && el.children.length > 0 && !el.querySelector('.empty-state-container')) { areaSortable = new Sortable(el, { group: { name: 'shared', pull: false, put: true }, handle: '.handle', animation: 150, disabled: !isInEditMode, onEnd: async (evt) => { if (evt.oldIndex === evt.newIndex && evt.from === evt.to) return; const orderedCodes = Array.from(evt.from.children).map(item => $(item).data('areacode')); try { let requestBody = { orderedAreaCodes: orderedCodes }; requestBody = appendConnectionId(requestBody); const response = await fetch('/Admin/AreaTable/UpdateAreaOrder', { method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken }, body: JSON.stringify(requestBody) }); if (!response.ok) throw response; const result = await response.json(); if (result.success) { notyf.success(result.message); } else { notyf.error(result.message || 'Cập nhật thứ tự thất bại.'); } } catch (error) { handleAjaxError(error, 'sắp xếp khu vực'); await loadAreas(); } }, onMove: function (evt) { $('#areaList .list-group-item').removeClass('drop-target-highlight'); const targetEl = $(evt.related); if (targetEl.length && !targetEl.hasClass('active')) { targetEl.addClass('drop-target-highlight'); } } }); } }
            function initTableSortables(areaCode) { destroyTableSortables(); const onStart = () => { $('body').addClass('is-dragging-table'); if (areaSortable) areaSortable.option('disabled', true); }; const onEnd = async (evt) => { $('body').removeClass('is-dragging-table'); $('#areaList .list-group-item').removeClass('drop-target-highlight'); if (areaSortable) areaSortable.option('disabled', !isInEditMode); const targetAreaEl = $(evt.originalEvent.target).closest('#areaList .list-group-item'); if (targetAreaEl.length > 0) { const tableCode = $(evt.item).data('tablecode'); const newAreaCode = targetAreaEl.data('areacode'); $(evt.item).remove(); if (evt.from.children.length > evt.oldIndex) { evt.from.insertBefore(evt.item, evt.from.children[evt.oldIndex]); } else { evt.from.appendChild(evt.item); } if (newAreaCode && newAreaCode !== currentSelectedAreaCode) { handleMoveTable(tableCode, newAreaCode); } return; } if (evt.from === evt.to) { if (evt.oldIndex === evt.newIndex) return; const orderedCodes = Array.from(evt.from.children).map(item => $(item).data('tablecode')); let requestData = { areaCode: areaCode, orderedTableCodes: orderedCodes }; requestData = appendConnectionId(requestData); try { const response = await fetch('/Admin/AreaTable/UpdateTableOrder', { method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken }, body: JSON.stringify(requestData) }); if (!response.ok) throw new Error("Lỗi server khi cập nhật thứ tự."); const result = await response.json(); if (result.success) { notyf.success(result.message); } else { notyf.error(result.message || "Yêu cầu sắp xếp thất bại."); } } catch (error) { handleAjaxError(error, 'sắp xếp bàn'); await loadTables(areaCode); } } }; const gridEl = document.getElementById('tableGrid'); const listEl = document.getElementById('tableList'); const sortableOptions = { group: { name: 'shared', pull: true, put: false }, animation: 150, disabled: !isInEditMode, onStart: onStart, onEnd: onEnd }; if (gridEl && gridEl.children.length > 0) { tableSortableGrid = new Sortable(gridEl, sortableOptions); } if (listEl && listEl.children.length > 0) { tableSortableList = new Sortable(listEl, { ...sortableOptions, handle: '.handle' }); } }

            function showExternalUpdateNotification(message) { notyf.success({ message: message, duration: 5000, icon: { className: 'fas fa-sync-alt', tagName: 'i', color: 'white' } }); }

            function initializeSignalR() {
                signalRConnection = new signalR.HubConnectionBuilder().withUrl("/appHub").withAutomaticReconnect().build();
                signalRConnection.on("ReceiveTableMove", (data) => { const message = `${data.updaterName} vừa di chuyển bàn <strong>${data.tableName}</strong> từ '${data.oldAreaName}' sang '${data.newAreaName}'.`; showExternalUpdateNotification(message); loadAreas(); });
                signalRConnection.on("ReceiveAreaUpdate", (data) => { showExternalUpdateNotification(`${data.updaterName} vừa cập nhật danh sách khu vực.`); loadAreas(); });
                signalRConnection.on("ReceiveTableUpdate", (data) => { let message = `${data.updaterName} vừa cập nhật dữ liệu bàn.`; const tableName = data.table ? `<strong>${data.table.nameTable}</strong>` : `bàn có mã <strong>${data.tableCode}</strong>`; switch (data.action) { case 'create': message = `${data.updaterName} vừa thêm bàn mới: ${tableName}.`; break; case 'update': message = `${data.updaterName} vừa cập nhật bàn ${tableName}.`; break; case 'delete': message = `${data.updaterName} vừa xóa ${tableName}.`; break; case 'reorder': message = `${data.updaterName} vừa sắp xếp lại các bàn.`; break; } showExternalUpdateNotification(message); switch (data.action) { case 'create': case 'delete': loadAreas(); break; case 'update': case 'reorder': if (data.areaCode && data.areaCode === currentSelectedAreaCode) { loadTables(currentSelectedAreaCode); } break; } });

                signalRConnection.on("ReceiveTableRequest", (data) => {
                    updateRequestIcon(data.tableCode, data.requestStatus);
                    if (isAudioEnabled && data.requestStatus !== 0) {
                        // === FIX: Lấy tên bàn trực tiếp từ dữ liệu 'data' nhận được ===
                        const tableName = data.tableName;
                        const requestText = data.requestStatus === 1 ? 'GỌI MÓN' : 'THANH TOÁN';

                        notificationSound.play().catch(e => console.error("Lỗi phát âm thanh: ", e));

                        // Kiểm tra lại để đảm bảo tableName không phải là undefined
                        const notyfMessage = `Bàn <strong>${tableName || data.tableCode}</strong> yêu cầu ${requestText}!`;
                        notyf.open({ type: 'info', message: notyfMessage, duration: 10000, icon: { className: 'fas fa-concierge-bell', tagName: 'i', color: 'white' } });
                    }
                });

                signalRConnection.start().then(() => console.log("SignalR Connected.")).catch(err => console.error("SignalR Connection Error: ", err));
            }

            function initializePage() {
                csrfToken = $('input[name="__RequestVerificationToken"]').val();
                notyf = new Notyf({ duration: 4000, position: { x: 'right', y: 'top' }, dismissible: true, types: [{ type: 'info', background: '#5D87FF', icon: false }] });
                Swal = window.Swal;
                areaModal = new bootstrap.Modal(document.getElementById('areaModal'));
                tableModal = new bootstrap.Modal(document.getElementById('tableModal'));

                $('#audio-activation-overlay').on('click', function () { if (!isAudioEnabled) { initializeAudio(); } $(this).css('opacity', '0'); setTimeout(() => $(this).hide(), 300); });
                $('#sortModeBtn').on('click', () => setEditMode(!isInEditMode));
                $('#showAddAreaModalBtn').on('click', () => setupAreaModal('create'));
                $('#showAddTableModalBtn').on('click', () => setupTableModal('create'));
                $('#saveAreaBtn').on('click', () => handleSave('area'));
                $('#saveTableBtn').on('click', () => handleSave('table'));
                $('#areaList').on('click', '.list-group-item', function (e) { if ($(e.target).closest('.dropdown, .handle').length > 0) return; currentSelectedAreaCode = $(this).data('areacode'); currentSelectedAreaName = $(this).data('areaname'); $('#areaList .list-group-item').removeClass('active'); $(this).addClass('active'); $('#tableListHeader').html(`<i class="fas fa-columns me-2"></i>Bàn tại: <strong>${currentSelectedAreaName}</strong>`).removeClass('text-muted'); $('#showAddTableModalBtn').show(); loadTables(currentSelectedAreaCode); });
                $('#areaList').on('click', '.edit-area-btn', function (e) { e.preventDefault(); e.stopPropagation(); checkConcurrencyBeforeEdit($(this).closest('[data-areacode]'), 'area'); });
                $('#tableGridContainer').on('click', '.edit-table-btn', function (e) { e.preventDefault(); e.stopPropagation(); checkConcurrencyBeforeEdit($(this).closest('[data-tablecode]'), 'table'); });
                $('#areaList').on('click', '.delete-area-btn', function (e) { e.preventDefault(); e.stopPropagation(); const item = $(this).closest('[data-areacode]'); handleDelete('area', item.data('areacode'), item.data('areaname')); });
                $('#tableGridContainer').on('click', '.delete-table-btn', function (e) { e.preventDefault(); e.stopPropagation(); const item = $(this).closest('[data-tablecode]'); handleDelete('table', item.data('tablecode'), item.data('tablename')); });
                $('#tableGridContainer').on('click', '.clear-request-btn', function (e) { e.preventDefault(); e.stopPropagation(); const tableCode = $(this).closest('[data-tablecode]').data('tablecode'); handleClearRequest(tableCode); });

                setEditMode(false);
                loadAreas();
                initializeSignalR();
            }

            $(document).ready(function () {
                cleanupPage();
                initializePage();
            });

        })(jQuery);
    </script>
}