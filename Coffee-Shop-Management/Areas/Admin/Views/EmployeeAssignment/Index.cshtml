@* File: Areas/Admin/Views/EmployeeAssignment/Index.cshtml *@
@{
    ViewData["Title"] = "Phân Công Ca Làm Việc";
}

@Html.AntiForgeryToken()

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-12">
            <div class="schedule-container">
                <div class="week-navigation">
                    <div class="nav-buttons">
                        <button id="prev-week" class="btn btn-outline-secondary btn-circle" title="Tuần trước"><i class="fas fa-chevron-left"></i></button>
                        <button id="today-week-btn" class="btn btn-outline-secondary" title="Tuần này">Tuần này</button>
                        <button id="next-week" class="btn btn-outline-secondary btn-circle" title="Tuần sau"><i class="fas fa-chevron-right"></i></button>
                    </div>
                    <h5 id="week-display" class="mb-0"></h5>
                    <div class="action-buttons ms-auto d-flex gap-2">
                        <button id="edit-shifts-btn" class="btn btn-warning" title="Chỉnh sửa giờ làm việc các ca">
                            <i class="fas fa-clock me-1"></i> Sửa Ca
                        </button>
                        <button id="export-excel-btn" class="btn btn-success" title="Xuất lịch tuần này ra Excel">
                            <i class="fas fa-file-excel me-1"></i> Xuất Excel
                        </button>
                    </div>
                </div>

                @* =============================================================== *@
                @* ==================== GIAO DIỆN CHO DESKTOP ==================== *@
                @* =============================================================== *@
                <div class="schedule-grid-wrapper d-none d-lg-block">
                    <div class="schedule-grid" id="schedule-grid">
                        @{
                            var shifts = new[] {
                        new { Name = "Sáng", ShiftId = 1 },
                        new { Name = "Chiều", ShiftId = 2 },
                        new { Name = "Tối", ShiftId = 3 }
                        };
                            var days = new[] { "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" };
                        }
                        @* Header Row *@
                        <div class="row g-2 mb-2" id="grid-header-row">
                            <div class="col"></div> @* Cột trống cho Time Label *@
                            @for (int i = 0; i < 7; i++)
                            {
                                <div class="col"><div class="grid-header"><span class="day-name"></span><span class="day-date"></span></div></div>
                            }
                        </div>

                        @foreach (var shift in shifts)
                        {
                            <div class="row g-2 mb-2 align-items-stretch">
                                <div class="col"><div class="time-label">@shift.Name</div></div>
                                @foreach (var day in days)
                                {
                                    <div class="col">
                                        <div class="schedule-cell" id="@(day)-@(shift.Name.ToLower())" data-shift-id="@shift.ShiftId" data-day="@day">
                                            <div class="cell-actions">
                                                <div class="add-employee-placeholder" title="Thêm nhân viên"><i class="fas fa-plus"></i></div>
                                                <div class="generate-qr-placeholder" title="Tạo mã QR điểm danh"><i class="fas fa-qrcode"></i></div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                @* ============================================================= *@
                @* ==================== GIAO DIỆN CHO MOBILE =================== *@
                @* ============================================================= *@
                <div class="mobile-schedule-wrapper d-block d-lg-none mt-3">
                    <div class="accordion" id="mobile-schedule-accordion">
                        @* Nội dung cho mobile sẽ được tạo bằng JavaScript *@
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@* Modal Add Employee *@
<div class="modal fade" id="addEmployeeModal" tabindex="-1" aria-labelledby="addEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addEmployeeModalLabel">Chọn nhân viên để thêm</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="search" id="modalSearchInput" class="form-control mb-3" placeholder="Tìm kiếm tên nhân viên...">
                <div id="modalEmployeeListContainer">
                    <div id="modalLoadingIndicator" class="text-center p-3" style="display: none;">
                        <div class="spinner-border spinner-border-sm text-secondary" role="status">
                            <span class="visually-hidden">Đang tải...</span>
                        </div> Đang tìm...
                    </div>
                    <div id="modalEmployeeList">
                        <div class="list-group">
                        </div>
                        <div id="modalNoResults" class="text-center text-muted p-3" style="display: none;">
                            Không tìm thấy nhân viên nào.
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Modal Edit Shifts *@
<div class="modal fade" id="editShiftsModal" tabindex="-1" aria-labelledby="editShiftsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="editShiftsModalLabel">Chỉnh sửa Giờ làm việc</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="editShiftsModalBody">
                <div class="text-center p-3" id="editShiftsLoadingIndicator">
                    <div class="spinner-border spinner-border-sm text-secondary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div> Đang tải thông tin ca...
                </div>
                <div id="editShiftsFormContainer" style="display: none;">
                </div>
                <div id="editShiftsErrorContainer" class="text-danger mt-2 small"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" id="save-shift-changes-btn">
                    <span class="spinner-border spinner-border-sm visually-hidden me-1" role="status" aria-hidden="true"></span>
                    Lưu thay đổi
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
            overflow-x: hidden;
        }

        .schedule-container {
            background-color: #ffffff;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .week-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid #dee2e6;
            flex-wrap: wrap;
            gap: 0.75rem;
        }

            .week-navigation .nav-buttons {
                display: flex;
                gap: 0.5rem;
                order: 1;
            }

                .week-navigation .nav-buttons button {
                    flex-shrink: 0;
                }

                .week-navigation .nav-buttons .btn-circle {
                    border-radius: 50%;
                    width: 35px;
                    height: 35px;
                    padding: 0;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                }

        #week-display {
            font-weight: 500;
            font-size: 1rem;
            text-align: center;
            flex-grow: 1;
            margin: 0 0.5rem;
            order: 2;
        }

        .week-navigation .action-buttons {
            display: flex;
            gap: 0.5rem;
            order: 3;
            margin-left: auto;
        }

            .week-navigation .action-buttons button {
                flex-shrink: 0;
            }

        /* === DESKTOP STYLES === */
        .grid-header {
            font-weight: bold;
            text-align: center;
            padding: 8px 5px;
            background-color: #6c757d;
            color: white;
            border-radius: 4px;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            line-height: 1.2;
            min-height: 50px;
            overflow: hidden;
            white-space: normal;
        }

            .grid-header .day-name {
                font-weight: bold;
            }

            .grid-header .day-date {
                font-size: 0.7rem;
                font-weight: normal;
            }

        .time-label {
            font-weight: bold;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            font-size: 0.85rem;
        }

        .schedule-cell {
            border: 1px dashed #adb5bd;
            min-height: 120px;
            padding: 6px;
            border-radius: 4px;
            background-color: #f8f9fa;
            transition: background-color 0.2s ease;
            display: flex;
            flex-direction: column;
            width: 100%;
            height: 100%;
        }

            .schedule-cell.drag-over {
                background-color: #cfe2ff;
                border-color: #0d6efd;
            }

        .schedule-grid .row {
            align-items: stretch;
            flex-wrap: nowrap;
        }

            .schedule-grid .row > .col {
                padding-left: 3px;
                padding-right: 3px;
                flex: 1 1 0;
                min-width: 0;
            }

        .schedule-grid-wrapper {
            overflow-x: auto;
            padding-bottom: 10px;
            margin-left: -4px;
            margin-right: -4px;
        }

        .schedule-grid {
            min-width: 800px;
        }

        .assigned-employee {
            padding: 4px 6px;
            margin-bottom: 4px;
            border-radius: 4px;
            font-size: 0.8rem;
            cursor: grab;
            width: 100%;
            transition: all 0.2s ease;
            order: 1;
            min-height: 30px;
            position: relative;
            display: flex;
            align-items: center;
            border: 1px solid transparent;
        }

            .assigned-employee.dragging {
                opacity: 0.4;
                transform: scale(1.05);
            }

            .assigned-employee .assignment-avatar, .assigned-employee .assignment-icon {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                margin-right: 6px;
                flex-shrink: 0;
                object-fit: cover;
            }

            .assigned-employee .assignment-icon {
                font-size: 14px;
                background-color: #6c757d;
                color: white;
                display: inline-flex;
                align-items: center;
                justify-content: center;
            }

            .assigned-employee .name-wrapper {
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
                flex-grow: 1;
            }

            .assigned-employee .remove-assignment {
                display: none;
                position: absolute;
                top: 50%;
                right: 4px;
                transform: translateY(-50%);
                cursor: pointer;
                color: #dc3545;
                font-size: 0.8rem;
                padding: 2px;
                border-radius: 3px;
                line-height: 1;
                z-index: 5;
            }

            .assigned-employee:hover .remove-assignment {
                display: inline-block;
            }

        .cell-actions {
            display: flex;
            flex-direction: row;
            justify-content: space-around;
            align-items: center;
            margin-top: auto;
            padding-top: 5px;
            order: 2;
        }

        .add-employee-placeholder, .generate-qr-placeholder {
            flex: 1;
            text-align: center;
            border: 1px solid transparent;
            padding: 4px;
            border-radius: 4px;
            cursor: pointer;
            color: #adb5bd;
            transition: all 0.2s ease;
        }

            .add-employee-placeholder:hover {
                background-color: #d1e7dd;
                color: #0f5132;
            }

            .generate-qr-placeholder:hover {
                background-color: #fff3cd;
                color: #664d03;
            }

        .assignment-status-icon {
            position: absolute;
            top: 2px;
            right: 3px;
            font-size: 0.65em;
        }

        .assigned-employee.status-pending {
            background-color: #cfe2ff;
            border-color: #9ec5fe;
            color: #052c65;
        }

        .assigned-employee.status-in {
            background-color: #d1e7dd;
            border-color: #a3cfbb;
            color: #0a3622;
        }

        .status-in .assignment-status-icon {
            color: #155724;
        }

        .assigned-employee.status-out {
            background-color: #e2e3e5;
            border-color: #d3d6d8;
            color: #41464b;
            opacity: 0.85;
        }

        .status-out .assignment-status-icon {
            color: #41464b;
        }

        /* === MODAL STYLES === */
        #modalEmployeeList .list-group {
            max-height: 300px;
            overflow-y: auto;
        }

        #modalEmployeeList .list-group-item {
            cursor: pointer;
            display: flex;
            align-items: center;
            font-size: 0.9rem;
        }

            #modalEmployeeList .list-group-item:hover {
                background-color: #f1f1f1;
            }

        .modal-list-avatar, .modal-list-icon {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            margin-right: 10px;
            flex-shrink: 0;
            object-fit: cover;
        }

        .shift-edit-row {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 1rem;
        }

            .shift-edit-row label.shift-name-label {
                font-weight: 500;
                min-width: 50px;
                text-align: right;
                flex-shrink: 0;
            }

            .shift-edit-row input[type="time"] {
                flex-grow: 1;
            }

        .time-separator {
            font-weight: bold;
            margin: 0 5px;
            flex-shrink: 0;
        }

        /* === MOBILE STYLES (NEW) === */
        .mobile-schedule-wrapper .accordion-button {
            font-weight: 500;
        }

        .mobile-schedule-wrapper .accordion-body {
            padding: 0.75rem;
        }

        .mobile-shift-group {
            margin-bottom: 1rem;
        }

        .mobile-shift-title {
            font-weight: bold;
            color: #000;
            padding: 0.5rem 0.75rem;
            background-color: #e9ecef;
            border-radius: 4px;
            margin-bottom: 0.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .mobile-shift-actions .btn {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }

        .mobile-employee-card {
            display: flex;
            align-items: center;
            padding: 0.5rem;
            background-color: #fff;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            margin-bottom: 0.5rem;
            position: relative;
        }

            .mobile-employee-card .assignment-avatar,
            .mobile-employee-card .assignment-icon {
                width: 30px;
                height: 30px;
                margin-right: 10px;
                border-radius: 50%;
                object-fit: cover;
                flex-shrink: 0;
            }

            .mobile-employee-card .assignment-icon {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                background-color: #6c757d;
                color: white;
            }

            .mobile-employee-card .name-wrapper {
                font-size: 0.9rem;
                flex-grow: 1;
            }

            .mobile-employee-card .remove-assignment {
                color: #dc3545;
                cursor: pointer;
                padding: 0.25rem 0.5rem;
            }

        .mobile-add-employee {
            display: block;
            width: 100%;
            text-align: center;
            padding: 0.5rem;
            border: 1px dashed #adb5bd;
            border-radius: 4px;
            color: #6c757d;
            cursor: pointer;
            background-color: #f8f9fa;
        }

            .mobile-add-employee:hover {
                background-color: #e9ecef;
            }

        /* === MEDIA QUERIES === */
        @@media (max-width: 767.98px) {
            .week-navigation {
                justify-content: center;
            }

            #week-display {
                order: 1;
                width: 100%;
                margin-bottom: 0.5rem;
            }

            .week-navigation .nav-buttons {
                order: 2;
            }

            .week-navigation .action-buttons {
                order: 3;
                margin-left: 0;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script>
        $(document).ready(function () {
            // --- CONSTANTS AND VARIABLES ---
            const notyf = new Notyf({ duration: 3500, position: { x: 'right', y: 'top' }, types: [{ type: 'success', background: '#28a745' }, { type: 'error', background: '#dc3545' }, { type: 'warning', background: '#ffc107', icon: { className: 'fas fa-exclamation-triangle', tagName: 'i', color: '#000' } }] });
            const scheduleGrid = $('#schedule-grid');
            const mobileAccordion = $('#mobile-schedule-accordion');
            const weekDisplay = $('#week-display');
            const prevWeekBtn = $('#prev-week');
            const nextWeekBtn = $('#next-week');
            const todayWeekBtn = $('#today-week-btn');
            const exportExcelBtn = $('#export-excel-btn');
            const editShiftsBtn = $('#edit-shifts-btn');
            const editShiftsModalEl = document.getElementById('editShiftsModal');
            const editShiftsModal = new bootstrap.Modal(editShiftsModalEl);
            const addEmployeeModalEl = document.getElementById('addEmployeeModal');
            const addEmployeeModal = new bootstrap.Modal(addEmployeeModalEl);
            const modalSearchInput = $('#modalSearchInput');

            // --- URLs & Tokens ---
            const getAssignmentsUrl = '@Url.Action("GetAssignments", "EmployeeAssignment", new { Area = "Admin" })';
            const getEmployeesUrl = '@Url.Action("GetEmployees", "EmployeeAssignment", new { Area = "Admin" })';
            const addAssignmentUrl = '@Url.Action("AddAssignment", "EmployeeAssignment", new { Area = "Admin" })';
            const removeAssignmentUrl = '@Url.Action("RemoveAssignment", "EmployeeAssignment", new { Area = "Admin" })';
            const moveAssignmentUrl = '@Url.Action("MoveAssignment", "EmployeeAssignment", new { Area = "Admin" })';
            const exportExcelUrl = '@Url.Action("ExportWeekScheduleToExcel", "EmployeeAssignment", new { Area = "Admin" })';
            const getShiftsUrl = '@Url.Action("GetShiftsForEditing", "EmployeeAssignment", new { Area = "Admin" })';
            const updateShiftsUrl = '@Url.Action("UpdateShiftTimes", "EmployeeAssignment", new { Area = "Admin" })';
            const generateQrCodeUrl = '@Url.Action("GenerateQrCode", "EmployeeAssignment", new { Area = "Admin" })';
            function getAntiForgeryToken() { return $('input[name="__RequestVerificationToken"]').val(); }

            // --- STATE & HELPERS ---
            let currentMonday = getMonday(new Date());
            let draggedElement = null;
            let targetCellElementForModal = null;
            let debounceTimeout = null;
            let qrCountdownInterval = null; // Biến để giữ ID của interval countdown
            const DAY_NAMES_FULL = ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"];
            const DAY_IDS = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
            const SHIFTS_INFO = [{ id: 1, name: "Sáng" }, { id: 2, name: "Chiều" }, { id: 3, name: "Tối" }];
            const SEARCH_DEBOUNCE_DELAY = 400;
            const DEFAULT_AVATAR_PATH = '/images/avatar/default-avatar.png';

            function formatDate(date, format = 'yyyy-mm-dd') { const d = String(date.getDate()).padStart(2, '0'); const m = String(date.getMonth() + 1).padStart(2, '0'); const y = date.getFullYear(); if (format === 'dd/mm') return `${d}/${m}`; if (format === 'dd/mm/yyyy') return `${d}/${m}/${y}`; return `${y}-${m}-${d}`; }
            function getMonday(d) { d = new Date(d); const day = d.getDay(); const diff = d.getDate() - day + (day === 0 ? -6 : 1); d.setHours(0, 0, 0, 0); return new Date(d.setDate(diff)); }
            function getSunday(d) { const m = getMonday(d); const s = new Date(m); s.setDate(m.getDate() + 6); return s; }
            function getCellId(workDate, shiftId) { const date = new Date(workDate); const dayId = DAY_IDS[date.getDay()]; const shiftInfo = SHIFTS_INFO.find(s => s.id === shiftId); if (!dayId || !shiftInfo) return null; return `${dayId}-${shiftInfo.name.toLowerCase()}`; }
            function getCellData(cellElement) { if (!cellElement) return null; const shiftId = parseInt($(cellElement).data('shift-id'), 10); const dayId = $(cellElement).data('day'); if (!shiftId || !dayId) return null; const dayIndex = DAY_IDS.indexOf(dayId); if (dayIndex === -1) return null; const workDate = new Date(currentMonday); workDate.setDate(currentMonday.getDate() + (dayIndex === 0 ? 6 : dayIndex - 1)); return { shiftId: shiftId, workDate: formatDate(workDate) }; }

            function updateWeekDates() {
                const monday = currentMonday;
                const sunday = getSunday(monday);
                weekDisplay.text(`Tuần: ${formatDate(monday, 'dd/mm/yyyy')} - ${formatDate(sunday, 'dd/mm/yyyy')}`);

                let currentDate = new Date(monday);
                $('#grid-header-row').find('.grid-header').each(function () {
                    const header = $(this);
                    header.find('.day-name').text(DAY_NAMES_FULL[currentDate.getDay()]);
                    header.find('.day-date').text(formatDate(currentDate, 'dd/mm'));
                    currentDate.setDate(currentDate.getDate() + 1);
                });

                mobileAccordion.empty();
                currentDate = new Date(monday);
                for (let i = 0; i < 7; i++) {
                    const dayId = DAY_IDS[currentDate.getDay()];
                    const dayDateStr = formatDate(currentDate);

                    const accordionItem = $(`
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="heading-${dayId}">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${dayId}" aria-expanded="false" aria-controls="collapse-${dayId}">
                                                    ${DAY_NAMES_FULL[currentDate.getDay()]} - ${formatDate(currentDate, 'dd/mm/yyyy')}
                                                </button>
                                            </h2>
                                            <div id="collapse-${dayId}" class="accordion-collapse collapse" aria-labelledby="heading-${dayId}" data-bs-parent="#mobile-schedule-accordion">
                                                <div class="accordion-body"></div>
                                            </div>
                                        </div>
                                    `);

                    const accordionBody = accordionItem.find('.accordion-body');
                    SHIFTS_INFO.forEach(shift => {
                        const workDate = new Date(monday);
                        workDate.setDate(monday.getDate() + i);
                        const cellDataStr = `data-shift-id="${shift.id}" data-day="${dayId}" data-work-date="${formatDate(workDate)}"`;

                        const shiftGroup = $(`
                                        <div class="mobile-shift-group">
                                            <div class="mobile-shift-title">
                                                <span>Ca ${shift.name}</span>
                                                <div class="mobile-shift-actions">
                                                    <button class="btn btn-sm btn-outline-warning generate-qr-placeholder-mobile" ${cellDataStr} title="Tạo mã QR"><i class="fas fa-qrcode"></i></button>
                                                </div>
                                            </div>
                                            <div class="mobile-employee-list" id="mobile-${dayId}-${shift.name.toLowerCase()}">
                                            </div>
                                            <div class="mobile-add-employee" ${cellDataStr} title="Thêm nhân viên">
                                                <i class="fas fa-plus"></i> Thêm nhân viên
                                            </div>
                                        </div>
                                    `);
                        accordionBody.append(shiftGroup);
                    });

                    mobileAccordion.append(accordionItem);
                    currentDate.setDate(currentDate.getDate() + 1);
                }
            }

            function clearAllAssignments() {
                scheduleGrid.find('.assigned-employee').remove();
                mobileAccordion.find('.mobile-employee-card').remove();
            }

            function createMobileAssignmentElement(assignment) {
                const cellTargetId = `mobile-${getCellId(assignment.workDate, assignment.shiftId)}`;
                const targetContainer = document.getElementById(cellTargetId);

                if (!targetContainer || $(targetContainer).find(`[data-assignment-id="${assignment.assignmentId}"]`).length > 0) {
                    return null;
                }
                const empName = assignment.employeeName || "N/A";

                const card = $('<div>', { 'class': 'mobile-employee-card', 'data-assignment-id': assignment.assignmentId, 'data-employee-id': assignment.employeeId });
                let avatarOrIcon = (assignment.employeeAvatar) ? $('<img>', { src: assignment.employeeAvatar, 'class': 'assignment-avatar', alt: empName, onerror: `this.onerror=null; this.src='${DEFAULT_AVATAR_PATH}';` }) : $('<i>', { 'class': 'fas fa-user assignment-icon' });
                const nameWrapper = $('<span>', { 'class': 'name-wrapper' }).text(empName);
                const removeBtn = $('<span>', { 'class': 'remove-assignment', 'title': 'Xóa phân công' }).html('<i class="fas fa-times-circle fa-lg"></i>').on('click', function (e) { e.stopPropagation(); const id = assignment.assignmentId; const name = empName; Swal.fire({ title: 'Xác nhận xóa', text: `Xóa phân công của "${name}"?`, icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', cancelButtonColor: '#6c757d', confirmButtonText: 'Đồng ý xóa!', cancelButtonText: 'Hủy bỏ' }).then((r) => { if (r.isConfirmed) removeAssignmentFromServer(id); }); });

                card.append(avatarOrIcon, nameWrapper, removeBtn);
                $(targetContainer).append(card);
                return card;
            }

            function createDesktopAssignmentElement(assignment) {
                const cellId = getCellId(assignment.workDate, assignment.shiftId);
                const targetCellEl = document.getElementById(cellId);
                if (!targetCellEl || $(targetCellEl).find(`[data-assignment-id="${assignment.assignmentId}"]`).length > 0) {
                    return null;
                }
                const empName = assignment.employeeName || "N/A";

                const assignmentEl = $('<div>', { 'class': 'assigned-employee', 'draggable': true, 'data-assignment-id': assignment.assignmentId, 'data-employee-id': assignment.employeeId, 'data-cell-id': targetCellEl.id, 'data-employee-name': empName }).css('cursor', 'grab');
                let avatarOrIcon = (assignment.employeeAvatar) ? $('<img>', { src: assignment.employeeAvatar, 'class': 'assignment-avatar', alt: empName, onerror: `this.onerror=null; this.src='${DEFAULT_AVATAR_PATH}';` }) : $('<i>', { 'class': 'fas fa-user assignment-icon' });
                assignmentEl.append(avatarOrIcon);
                assignmentEl.append($('<span>', { 'class': 'name-wrapper' }).text(empName));
                assignmentEl.append($('<span>', { 'class': 'assignment-status-icon' }));
                const removeBtn = $('<span>', { 'class': 'remove-assignment', 'title': 'Xóa phân công' }).html('<i class="fas fa-times-circle"></i>').on('click', function (e) { e.stopPropagation(); const id = assignment.assignmentId; const name = empName; Swal.fire({ title: 'Xác nhận xóa', text: `Xóa phân công của "${name}"?`, icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', cancelButtonColor: '#6c757d', confirmButtonText: 'Đồng ý xóa!', cancelButtonText: 'Hủy bỏ' }).then((r) => { if (r.isConfirmed) removeAssignmentFromServer(id); }); });
                assignmentEl.append(removeBtn);

                let tooltipText = `${empName}\nTrạng thái: ${assignment.attendanceStatus || 'Chưa vào ca'}`;
                switch (assignment.attendanceStatus) {
                    case "Đúng giờ": case "Vào trễ": assignmentEl.addClass('status-in'); assignmentEl.find('.assignment-status-icon').html('<i class="fas fa-circle"></i>'); if (assignment.actualClockIn) { tooltipText += `\n vào lúc: ${new Date(assignment.actualClockIn).toLocaleTimeString('vi-VN')}`; } break;
                    case "Ra sớm": case "Vào trễ, Ra sớm": case "Đã ra ca": assignmentEl.addClass('status-out'); assignmentEl.find('.assignment-status-icon').html('<i class="fas fa-check-circle"></i>'); if (assignment.actualClockIn) tooltipText += `\nVào: ${new Date(assignment.actualClockIn).toLocaleTimeString('vi-VN')}`; if (assignment.actualClockOut) tooltipText += `\nRa: ${new Date(assignment.actualClockOut).toLocaleTimeString('vi-VN')}`; break;
                    default: assignmentEl.addClass('status-pending'); break;
                }
                assignmentEl.attr('title', tooltipText);
                assignmentEl[0].addEventListener('dragstart', handleDragStart);
                assignmentEl[0].addEventListener('dragend', handleDragEnd);
                assignmentEl.insertBefore($(targetCellEl).find('.cell-actions'));
                return assignmentEl;
            }

            function loadAssignmentsForWeek(date) {
                clearAllAssignments();
                const start = formatDate(date);
                $.ajax({
                    url: getAssignmentsUrl, method: 'GET', data: { startDate: start },
                    success: function (data) {
                        if (Array.isArray(data)) {
                            data.forEach(assignment => {
                                createDesktopAssignmentElement(assignment);
                                createMobileAssignmentElement(assignment);
                            });
                        }
                    },
                    error: function (xhr) { notyf.error('Lỗi tải dữ liệu phân công.'); }
                });
            }

            function removeAssignmentFromServer(assignmentId) {
                $.ajax({
                    url: removeAssignmentUrl, method: 'POST',
                    headers: { 'RequestVerificationToken': getAntiForgeryToken() },
                    data: { assignmentId: assignmentId },
                    success: function (res) {
                        if (res.success) {
                            notyf.success(res.message || "Đã xóa.");
                            $(`[data-assignment-id="${assignmentId}"]`).fadeOut(300, function () { $(this).remove(); });
                        } else { notyf.error(res.message || "Lỗi xóa."); }
                    },
                    error: () => notyf.error('Lỗi server khi xóa.')
                });
            }

            function handleAddEmployeeFromModal(employeeId, employeeName) {
                if (!targetCellElementForModal) { addEmployeeModal.hide(); return; }
                const isAlreadyAssigned = $(`[data-shift-id="${$(targetCellElementForModal).data('shift-id')}"][data-day="${$(targetCellElementForModal).data('day')}"]`).find(`[data-employee-id="${employeeId}"]`).length > 0;
                if (isAlreadyAssigned) { notyf.open({ type: 'warning', message: `Nhân viên ${employeeName || 'này'} đã được phân công.` }); return; }
                const cellData = getCellData(targetCellElementForModal);
                if (!cellData) { addEmployeeModal.hide(); return; }
                $.ajax({
                    url: addAssignmentUrl, method: 'POST',
                    headers: { 'RequestVerificationToken': getAntiForgeryToken() },
                    data: { employeeId: employeeId, shiftId: cellData.shiftId, workDateStr: cellData.workDate },
                    success: function (res) {
                        if (res.success && res.assignment) {
                            notyf.success(res.message || "Đã thêm.");
                            createDesktopAssignmentElement(res.assignment);
                            createMobileAssignmentElement(res.assignment);
                            addEmployeeModal.hide();
                        } else { notyf.error(res.message || "Lỗi thêm."); }
                    },
                    error: function (xhr) { let msg = "Lỗi server."; if (xhr.responseJSON && xhr.responseJSON.message) { msg = xhr.responseJSON.message; } notyf.error(msg); }
                });
            }

            function handleDragStart(e) { if (!e.target.classList.contains('assigned-employee')) { return; } draggedElement = e.target; const aId = draggedElement.dataset.assignmentId; e.dataTransfer.setData('text/plain', aId); e.dataTransfer.setData('employeeId', draggedElement.dataset.employeeId); e.dataTransfer.setData('employeeName', draggedElement.dataset.employeeName); e.dataTransfer.effectAllowed = 'move'; setTimeout(() => { if (draggedElement) draggedElement.classList.add('dragging'); }, 0); }
            function handleDragEnd(e) { if (draggedElement) { draggedElement.classList.remove('dragging'); } $('.schedule-cell.drag-over').removeClass('drag-over'); }

            // --- EVENT LISTENERS ---
            function changeWeek(offset) { currentMonday.setDate(currentMonday.getDate() + offset * 7); updateWeekDates(); loadAssignmentsForWeek(currentMonday); }
            function goToTodayWeek() { currentMonday = getMonday(new Date()); updateWeekDates(); loadAssignmentsForWeek(currentMonday); }
            prevWeekBtn.on('click', () => changeWeek(-1));
            nextWeekBtn.on('click', () => changeWeek(1));
            todayWeekBtn.on('click', goToTodayWeek);

            scheduleGrid.on('dragover', '.schedule-cell', function (e) { e.preventDefault(); e.originalEvent.dataTransfer.dropEffect = 'move'; if (!$(this).hasClass('drag-over')) { $('.schedule-cell.drag-over').removeClass('drag-over'); $(this).addClass('drag-over'); } });
            scheduleGrid.on('dragleave', '.schedule-cell', function (e) { if (!e.relatedTarget || !this.contains(e.relatedTarget)) $(this).removeClass('drag-over'); });

            scheduleGrid.on('drop', '.schedule-cell', function (e) {
                e.preventDefault();
                const targetCell = this;
                $(targetCell).removeClass('drag-over');
                if (!draggedElement) return;
                if (targetCell === $(draggedElement).closest('.schedule-cell')[0]) { return; }

                const assignmentId = parseInt(e.originalEvent.dataTransfer.getData('text/plain'), 10);
                const employeeId = e.originalEvent.dataTransfer.getData('employeeId');
                const employeeName = e.originalEvent.dataTransfer.getData('employeeName');

                if (!assignmentId || !employeeId) { return; }
                const targetCellData = getCellData(targetCell);
                if (!targetCellData) { notyf.error('Lỗi ô đích.'); return; }

                // =================================================================================
                // === SỬA LỖI TẠI ĐÂY: Xử lý trường hợp kéo vào ô đã có nhân viên ===
                // =================================================================================
                if ($(targetCell).find(`.assigned-employee[data-employee-id='${employeeId}']`).length > 0) {
                    notyf.open({ type: 'warning', message: `Nhân viên ${employeeName || 'này'} đã có trong ca đích.` });
                    // KHÔNG HỦY `draggedElement`. Cứ để sự kiện `dragend` tự dọn dẹp.
                    // Chỉ cần thoát khỏi hàm drop là đủ.
                    return;
                }

                $.ajax({
                    url: moveAssignmentUrl,
                    method: 'POST',
                    headers: { 'RequestVerificationToken': getAntiForgeryToken() },
                    data: {
                        assignmentId: assignmentId,
                        targetShiftId: targetCellData.shiftId,
                        targetWorkDateStr: targetCellData.workDate
                    },
                    success: function (res) {
                        if (res.success && res.newAssignment) {
                            notyf.success(res.message || "Đã di chuyển.");
                            $(`[data-assignment-id="${assignmentId}"]`).remove();
                            createDesktopAssignmentElement(res.newAssignment);
                            createMobileAssignmentElement(res.newAssignment);
                        } else {
                            notyf.error(res.message || "Lỗi di chuyển phân công.");
                        }
                    },
                    error: function (xhr) {
                        let msg = "Lỗi máy chủ khi di chuyển phân công.";
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            msg = xhr.responseJSON.message;
                        }
                        notyf.error(msg);
                    },
                    complete: function () {
                        // Việc dọn dẹp chính sẽ do sự kiện 'dragend' xử lý để đảm bảo luôn chạy
                    }
                });
            });

            $(document).on('click', '.add-employee-placeholder, .mobile-add-employee', function () {
                targetCellElementForModal = this;
                $('#modalSearchInput').val('');
                $('#modalNoResults').hide();
                populateModalEmployeeList();
                addEmployeeModal.show();
            });

            function populateModalEmployeeList(searchTerm = '') { $('#modalLoadingIndicator').show(); $('#modalEmployeeList .list-group').hide().empty(); $('#modalNoResults').hide(); $.ajax({ url: getEmployeesUrl, method: 'GET', data: { searchTerm: searchTerm }, success: function (emps) { $('#modalLoadingIndicator').hide(); if (emps && emps.length > 0) { emps.forEach(emp => { const listItem = $('<a>', { href: '#', 'class': 'list-group-item list-group-item-action', 'data-employee-id': emp.id }); let avatar = (emp.avatarUrl) ? $('<img>', { src: emp.avatarUrl, 'class': 'modal-list-avatar', onerror: `this.onerror=null; this.src='${DEFAULT_AVATAR_PATH}';` }) : $('<i>', { 'class': 'fas fa-user modal-list-icon' }); listItem.append(avatar).append(document.createTextNode(` ${emp.name || 'N/A'}`)).on('click', (e) => { e.preventDefault(); handleAddEmployeeFromModal(emp.id, emp.name); }); $('#modalEmployeeList .list-group').append(listItem); }); $('#modalEmployeeList .list-group').show(); } else { $('#modalNoResults').show(); } }, error: function () { $('#modalLoadingIndicator').hide(); $('#modalEmployeeList .list-group').show().html('<p class="text-danger text-center">Lỗi tải NV.</p>'); } }); }
            modalSearchInput.on('input', function () { clearTimeout(debounceTimeout); $('#modalLoadingIndicator').show(); $('#modalEmployeeList .list-group').hide(); $('#modalNoResults').hide(); debounceTimeout = setTimeout(() => { populateModalEmployeeList(modalSearchInput.val()); }, SEARCH_DEBOUNCE_DELAY); });
            addEmployeeModalEl.addEventListener('hidden.bs.modal', () => { modalSearchInput.val(''); $('#modalEmployeeList .list-group').empty(); targetCellElementForModal = null; });

            editShiftsBtn.on('click', function () {
                $('#editShiftsLoadingIndicator').show(); $('#editShiftsFormContainer').hide().empty(); $('#editShiftsErrorContainer').hide().empty(); editShiftsModal.show();
                $.ajax({
                    url: getShiftsUrl, method: 'GET', success: function (shifts) {
                        $('#editShiftsLoadingIndicator').hide();
                        if (shifts && shifts.length > 0) {
                            shifts.forEach(s => { const row = `<div class="shift-edit-row" data-shift-id="${s.shiftId}"><label for="shift-start-${s.shiftId}" class="form-label shift-name-label">${s.name}:</label><input type="time" class="form-control shift-start-time" id="shift-start-${s.shiftId}" value="${s.startTime}" required><span class="time-separator">-</span><input type="time" class="form-control shift-end-time" id="shift-end-${s.shiftId}" value="${s.endTime}" required><input type="hidden" class="shift-id" value="${s.shiftId}"></div>`; $('#editShiftsFormContainer').append(row); });
                            $('#editShiftsFormContainer').show();
                        } else { $('#editShiftsErrorContainer').text('Không tìm thấy ca.').show(); }
                    }, error: function () { $('#editShiftsLoadingIndicator').hide(); $('#editShiftsErrorContainer').text('Lỗi tải thông tin ca.').show(); }
                });
            });

            $('#save-shift-changes-btn').on('click', function () {
                const btn = $(this), originalHtml = btn.html(); btn.prop('disabled', true).find('.spinner-border').removeClass('visually-hidden'); $('#editShiftsErrorContainer').hide().empty(); let data = [], isValid = true;
                $('#editShiftsFormContainer').find('.shift-edit-row').each(function () { const row = $(this), id = parseInt(row.find('.shift-id').val()), start = row.find('.shift-start-time').val(), end = row.find('.shift-end-time').val(); if (!start || !end) { isValid = false; } if (!isNaN(id)) data.push({ ShiftId: id, StartTime: start, EndTime: end }); });
                if (!isValid) { $('#editShiftsErrorContainer').text('Vui lòng nhập đủ thông tin.').show(); btn.prop('disabled', false).html(originalHtml); return; }
                $.ajax({
                    url: updateShiftsUrl, method: 'POST', contentType: 'application/json', headers: { 'RequestVerificationToken': getAntiForgeryToken() }, data: JSON.stringify(data),
                    success: function (res) { if (res.success) { notyf.success(res.message); editShiftsModal.hide(); } else { let msg = res.message; if (res.errors) msg += '<br/>' + res.errors.join('<br/>'); $('#editShiftsErrorContainer').html(msg).show(); } },
                    error: function () { $('#editShiftsErrorContainer').text('Lỗi server khi cập nhật.').show(); },
                    complete: () => btn.prop('disabled', false).html(originalHtml)
                });
            });

            exportExcelBtn.on('click', function () {
                const btn = $(this), original = btn.html(); btn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Đang xử lý...'); const start = formatDate(currentMonday);
                fetch(`${exportExcelUrl}?startDate=${start}`).then(res => { if (!res.ok) return res.json().catch(() => { throw new Error(`Lỗi ${res.status}`); }).then(err => { throw new Error(err.message); }); const disposition = res.headers.get('Content-Disposition'); let filename = `LichLamViec_${start}.xlsx`; if (disposition) { const match = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(disposition); if (match && match[1]) filename = decodeURIComponent(match[1].replace(/['"]/g, '')); } return res.blob().then(blob => ({ blob, filename })); }).then(({ blob, filename }) => { const url = window.URL.createObjectURL(blob); const a = document.createElement('a'); a.style.display = 'none'; a.href = url; a.download = filename; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); a.remove(); notyf.success('Xuất Excel thành công!'); }).catch(err => notyf.error(`Lỗi xuất Excel: ${err.message}`)).finally(() => btn.prop('disabled', false).html(original));
            });

            $(document).on('click', '.generate-qr-placeholder-mobile', function (e) {
                e.stopPropagation(); const button = $(this); const cellData = { shiftId: button.data('shift-id'), workDate: button.data('work-date') }; const shiftInfo = SHIFTS_INFO.find(s => s.id === cellData.shiftId);
                if (cellData && shiftInfo) { showQrCodeModalPrompt(cellData, shiftInfo.name); } else { notyf.error('Không thể lấy thông tin ca/ngày của ô này.'); }
            });

            function showQrCodeModal(type, cellData, shiftName) {
                const typeText = type === 'in' ? 'Vào Ca' : 'Kết Ca';
                const qrUrl = `${generateQrCodeUrl}?shiftId=${cellData.shiftId}&date=${cellData.workDate}&type=${type}`;

                Swal.fire({
                    title: `Đang tạo mã QR...`,
                    text: 'Vui lòng chờ trong giây lát',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                $.ajax({
                    url: qrUrl,
                    method: 'GET',
                    success: function (res) {
                        if (res.success) {
                            if (qrCountdownInterval) {
                                clearInterval(qrCountdownInterval);
                            }
                            const expirationDate = new Date(res.expiresAt);

                            Swal.fire({
                                title: `Mã QR ${typeText}`,
                                html: `
                                            <div>Dành cho <b>Ca ${shiftName}</b> - Ngày: <b>${formatDate(new Date(cellData.workDate), 'dd/mm/yyyy')}</b></div>
                                            <div id="qr-countdown-container" style="margin-top: 10px; font-weight: bold; font-size: 1.2rem; color: #dc3545;">
                                                Mã sẽ hết hạn sau: <span id="qr-countdown">--</span> giây
                                            </div>
                                        `,
                                imageUrl: res.qrImageUrl,
                                imageWidth: 250,
                                imageHeight: 250,
                                imageAlt: `QR Code ${typeText}`,
                                allowOutsideClick: false,
                                didOpen: () => {
                                    const countdownSpan = document.getElementById('qr-countdown');
                                    const countdownContainer = document.getElementById('qr-countdown-container');

                                    qrCountdownInterval = setInterval(() => {
                                        const now = new Date();
                                        const secondsRemaining = Math.round((expirationDate.getTime() - now.getTime()) / 1000);

                                        if (secondsRemaining > 0) {
                                            countdownSpan.textContent = secondsRemaining;
                                        } else {
                                            clearInterval(qrCountdownInterval);
                                            countdownContainer.innerHTML = 'Mã QR đã hết hạn!';
                                            $('.swal2-image').css('filter', 'grayscale(100%) opacity(0.5)');
                                            Swal.update({
                                                showConfirmButton: true,
                                                confirmButtonText: 'Tạo mã mới',
                                            });
                                            Swal.getConfirmButton().onclick = () => {
                                                showQrCodeModalPrompt(cellData, shiftName);
                                            };
                                        }
                                    }, 1000);
                                },
                                willClose: () => {
                                    if (qrCountdownInterval) {
                                        clearInterval(qrCountdownInterval);
                                    }
                                }
                            });
                        } else {
                            Swal.fire({ icon: 'error', title: 'Lỗi!', text: res.message || 'Không thể tạo mã QR. Vui lòng thử lại.' });
                        }
                    },
                    error: function () {
                        Swal.fire({ icon: 'error', title: 'Lỗi!', text: 'Đã xảy ra lỗi kết nối. Vui lòng thử lại.' });
                    }
                });
            }

            function showQrCodeModalPrompt(cellData, shiftName) { Swal.fire({ title: 'Chọn loại mã QR', text: `Tạo mã điểm danh cho Ca ${shiftName} - Ngày ${formatDate(new Date(cellData.workDate), 'dd/mm')}`, showDenyButton: true, showCancelButton: true, confirmButtonText: '<i class="fas fa-sign-in-alt me-1"></i> Vào Ca', denyButtonText: '<i class="fas fa-sign-out-alt me-1"></i> Kết Ca', confirmButtonColor: '#28a745', denyButtonColor: '#dc3545', cancelButtonText: 'Hủy' }).then((result) => { if (result.isConfirmed) { showQrCodeModal('in', cellData, shiftName); } else if (result.isDenied) { showQrCodeModal('out', cellData, shiftName); } }); }
            scheduleGrid.on('click', '.generate-qr-placeholder', function (e) { e.stopPropagation(); const cell = $(this).closest('.schedule-cell')[0]; const cellData = getCellData(cell); const shiftName = $(cell).parent().parent().find('.time-label').text(); if (cellData) { showQrCodeModalPrompt(cellData, shiftName); } else { notyf.error('Không thể lấy thông tin ca/ngày của ô này.'); } });

            // --- INITIALIZATION ---
            updateWeekDates();
            loadAssignmentsForWeek(currentMonday);
        });
    </script>
}