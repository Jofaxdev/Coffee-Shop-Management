@{
    ViewData["Title"] = "Quản lý Kho";
    Layout = "_Layout"; // Hoặc layout admin của bạn
}

@* --- SECTION STYLES --- *@
@section Styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/2.0.7/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />

    <style>
        /* --- Biến màu chủ đạo --- */
        :root {
            --primary-color: #5d87ff;
            --primary-color-rgb: 93, 135, 255;
            --light-blue-bg: #ecf2ff;
        }

        .page-title {
            color: var(--primary-color);
            font-weight: 700;
            margin-bottom: 1.5rem;
        }

        .nav-tabs .nav-link {
            color: var(--primary-color);
            font-weight: 500;
        }

            .nav-tabs .nav-link.active {
                color: #495057;
                background-color: #fff;
                border-color: #dee2e6 #dee2e6 #fff;
                font-weight: 600;
            }

        .tab-pane {
            padding-top: 1.5rem;
        }
        /* --- Card Styling --- */
        .card-inventory {
            border-radius: 0.75rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            border: 1px solid #e9ecef;
            margin-bottom: 1.5rem;
            background-color: #fff;
        }

            .card-inventory .card-header {
                background-color: var(--light-blue-bg);
                border-bottom: 1px solid #e9ecef;
                padding: 0.75rem 1.25rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .card-inventory .card-title {
                color: var(--primary-color);
                font-weight: 600;
                margin-bottom: 0;
                font-size: 1.1rem;
                display: inline-flex;
                align-items: center;
            }

                .card-inventory .card-title i {
                    color: var(--primary-color);
                    margin-right: 0.5rem;
                }

        /* --- Modal Styling --- */
        .modal-header {
            background-color: var(--primary-color);
            color: white;
            border-bottom: none;
            padding: 1rem 1.25rem;
        }

            .modal-header .modal-title {
                font-weight: 600;
                font-size: 1.15rem;
            }

        .modal-content {
            border-radius: 0.75rem;
            border: none;
            overflow: hidden;
        }

        .modal-footer {
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
            padding: 0.75rem 1.25rem;
        }

        .modal-header .btn-close {
            filter: invert(1) grayscale(100%) brightness(200%);
        }

        .form-label-group label {
            font-weight: 500;
            display: block;
            margin-bottom: 0.4rem;
            font-size: 0.85rem;
            color: #495057;
        }

        .form-label-group {
            margin-bottom: 1rem;
        }


        /* --- Loading Overlay --- */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1051;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255,255,255,0.7);
            color: #333;
        }

        body > .loading-overlay { /* Cho loading toàn trang */
            position: fixed;
            z-index: 1060;
        }
        /* --- DataTables Controls --- */
        .dataTables_wrapper .dataTables_length,
        .dataTables_wrapper .dataTables_filter,
        .dataTables_wrapper .dataTables_paginate {
            display: none !important;
        }

        .dataTables_info_wrapper {
            padding: 0.5rem 0;
            font-size: 0.85em;
            color: #6c757d;
        }

        .dataTables_processing_custom {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 200px;
            transform: translate(-50%, -50%);
            text-align: center;
            padding: 1em 0;
            background-color: rgba(255, 255, 255, 0.85);
            border: 1px solid var(--light-blue-bg);
            border-radius: 4px;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
            z-index: 1051;
            color: var(--primary-color);
            font-weight: 500;
            display: none;
        }

        /* --- Custom Pagination --- */
        #customPaginationIngredients .pagination,
        #customPaginationSuppliers .pagination,
        #customPaginationTransactions .pagination {
            margin: 0;
        }

        #customPaginationIngredients .page-link,
        #customPaginationSuppliers .page-link,
        #customPaginationTransactions .page-link {
            font-size: 0.85rem;
            padding: 0.4rem 0.75rem;
            color: var(--primary-color);
            border: 1px solid #dee2e6;
            margin: 0 2px;
            border-radius: 0.3rem;
            background-color: #fff;
            transition: all 0.2s ease-in-out;
        }

        #customPaginationIngredients .page-item.disabled .page-link,
        #customPaginationSuppliers .page-item.disabled .page-link,
        #customPaginationTransactions .page-item.disabled .page-link {
            color: #6c757d;
            background-color: #f8f9fa;
            border-color: #dee2e6;
        }

        #customPaginationIngredients .page-item.active .page-link,
        #customPaginationSuppliers .page-item.active .page-link,
        #customPaginationTransactions .page-item.active .page-link {
            z-index: 3;
            color: #fff;
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        #customPaginationIngredients .page-link:hover,
        #customPaginationSuppliers .page-link:hover,
        #customPaginationTransactions .page-link:hover {
            background-color: var(--light-blue-bg);
            border-color: #dee2e6;
            color: var(--primary-color);
        }

        #customPaginationIngredients .page-item.active .page-link:hover,
        #customPaginationSuppliers .page-item.active .page-link:hover,
        #customPaginationTransactions .page-item.active .page-link:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: #fff;
        }

        /* --- Select2 Styling --- */
        .select2-container--bootstrap-5 .select2-selection {
            min-height: calc(1.5em + .75rem + 2px);
            font-size: 1rem;
            padding: .375rem .75rem;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            line-height: 1.5;
        }

        /* Style cho Select2 multiple */
        .select2-container--bootstrap-5 .select2-selection--multiple {
            min-height: calc(1.5em + .75rem + 2px);
            font-size: 1rem;
            /* padding: .375rem .75rem; */ /* Bỏ padding này để không bị lệch */
        }

            .select2-container--bootstrap-5 .select2-selection--multiple .select2-selection__rendered {
                display: flex;
                flex-wrap: wrap;
                align-items: center;
                padding-left: 0.5rem; /* Thêm padding để giống input thường */
            }

            .select2-container--bootstrap-5 .select2-selection--multiple .select2-search__field {
                margin-top: 0.2rem; /* Điều chỉnh vị trí con trỏ gõ */
            }

            .select2-container--bootstrap-5 .select2-selection--multiple .select2-selection__choice {
                margin-top: calc(((.75rem + 2px) - 1.5em) / 2); /* Căn giữa các tag đã chọn */
                margin-right: 0.375rem;
            }


        .select2-container--bootstrap-5 .select2-dropdown {
            border: 1px solid var(--primary-color);
        }

        .select2-container--bootstrap-5.select2-container--focus .select2-selection,
        .select2-container--bootstrap-5.select2-container--open .select2-selection {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(var(--primary-color-rgb),0.25);
        }

        /* --- Focus Styles --- */
        .form-control:focus, .form-select:focus, .btn:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(var(--primary-color-rgb), 0.25);
            outline: 0;
        }

        *:focus {
            outline: none;
        }

        .form-control:focus-visible, .form-select:focus-visible, .btn:focus-visible, a:focus-visible {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(var(--primary-color-rgb), 0.25);
            outline: 0;
        }


        /* --- Custom Search Box for DataTables --- */
        .dt-search-controls {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: flex-end;
            margin-bottom: 1rem;
            gap: 1rem;
        }

        .dt-search-input-group {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

            .dt-search-input-group label,
            .dt-length-select-group label {
                font-size: 0.85rem;
                margin-bottom: 0.3rem;
                color: #495057;
                font-weight: 500;
            }

        .dt-controls-group {
            display: flex;
            align-items: flex-end;
            gap: 0.5rem;
        }

        .dt-length-select-group {
            display: flex;
            flex-direction: column;
        }

            .dt-length-select-group .form-select {
                width: auto;
                min-width: 80px;
            }

        .dt-search {
        }

        /* Style cho table header */
        .table thead th {
            background-color: #f8f9fa;
            font-weight: 600;
            border-bottom-width: 2px;
            border-color: #dee2e6;
            font-size: 0.9rem;
            color: #495057;
            vertical-align: middle;
            white-space: nowrap;
        }

        .table td {
            vertical-align: middle;
        }

        /* Style cho card footer chứa pagination */
        .card-inventory .card-footer {
            background-color: #f8f9fa;
            padding: 0.75rem 1rem;
            border-top: 1px solid #e9ecef;
        }

        .dt-no-wrap {
            white-space: nowrap;
        }

        /* --- Cấu hình chung cho việc cắt ngắn văn bản nhiều dòng --- */
        .dt-col-100-row-2,
        .dt-col-110-row-2,
        .dt-col-120-row-2,
        .dt-col-180-row-2,
        .dt-col-180-row-3 {
            display: -webkit-box;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: normal !important; /* Ghi đè nowrap của header nếu cần */
            word-break: break-word;
        }

        .dt-col-100-row-2 {
            min-width: 100px !important;
            max-width: 100px !important;
        }

        .dt-col-110-row-2 {
            min-width: 110px !important;
            max-width: 110px !important;
        }

        .dt-col-120-row-2 {
            min-width: 120px !important;
            max-width: 120px !important;
        }

        .dt-col-180-row-2,
        .dt-col-180-row-3 {
            min-width: 180px !important;
            max-width: 180px !important;
        }

        .dt-col-100-row-2,
        .dt-col-110-row-2,
        .dt-col-120-row-2,
        .dt-col-180-row-2 {
            -webkit-line-clamp: 2;
        }

        .dt-col-180-row-3 {
            -webkit-line-clamp: 3;
        }

        /* Căn chỉnh nút xóa filter trong Lịch sử giao dịch */
        .transaction-history-filters .btn-clear-filters {
            margin-top: auto;
            height: calc(1.5em + .75rem + 2px);
        }

        /* Style cho các nút chọn nhanh thời gian */
        .time-shortcut-buttons .btn {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }

        /* Style cho modal báo cáo */
        #inventoryReportModal .select2-container {
            width: 100% !important;
        }

        /* === BẢNG MÀU MỚI CHO CÁC THẺ KPI === */
        /* === CSS MỚI CHO CÁC THẺ KPI TRÔNG ĐẸP VÀ CÂN ĐỐI HƠN === */
        .dashboard-kpi-card {
            transition: all 0.3s ease-in-out;
            border: none;
        }

            .dashboard-kpi-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 25px -8px var(--card-color, #999) !important;
            }

            .dashboard-kpi-card .card-body {
                padding: 1.25rem;
            }

            .dashboard-kpi-card .card-title {
                font-weight: 500;
                color: rgba(255, 255, 255, 0.85);
                font-size: 0.9rem;
            }

            .dashboard-kpi-card .kpi-value {
                font-size: 1.8rem;
                font-weight: 700;
                color: #fff;
                white-space: nowrap; 
            }

            .dashboard-kpi-card .kpi-icon {
                font-size: 3.5rem;
                position: absolute;
                right: -15px;
                bottom: -15px;
                opacity: 0.2;
                transform: rotate(-15deg);
            }

        /* CSS để thu nhỏ font chữ cho các thẻ KPI */
        .kpi-value.kpi-value-medium {
            font-size: 1.8rem; /* Cỡ chữ trung bình */
        }

        .kpi-value.kpi-value-small {
            font-size: 1.5rem; /* Cỡ chữ nhỏ nhất */
        }

        /* Định nghĩa màu cho từng thẻ */
        .card-custom-blue {
            --card-color: #5d87ff;
            background: linear-gradient(45deg, #5d87ff, #769dff);
        }

        .card-custom-green {
            --card-color: #13deb9;
            background: linear-gradient(45deg, #13deb9, #29e8c3);
        }

        .card-custom-orange {
            --card-color: #ffab00;
            background: linear-gradient(45deg, #ffab00, #ffbe3b);
        }

        .card-custom-red {
            --card-color: #ff5449;
            background: linear-gradient(45deg, #ff5449, #ff7269);
        }

        .card-custom-purple {
            --card-color: #986dff;
            background: linear-gradient(45deg, #986dff, #ad8eff);
        }

        .dashboard-title {
            text-transform: capitalize;
        }
    </style>
}
<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="page-title mb-0"><i class="bi bi-box-seam me-2"></i>Quản lý Kho</h1>
        <button type="button" class="btn btn-primary" id="btnOpenInventoryReportModal">
            <i class="bi bi-file-earmark-arrow-down me-1"></i> Báo cáo & Xuất file
        </button>
    </div>

    <ul class="nav nav-tabs" id="inventoryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="dashboard-tab-btn" data-bs-toggle="tab" data-bs-target="#dashboardTabPane" type="button" role="tab" aria-controls="dashboardTabPane" aria-selected="true"><i class="bi bi-bar-chart-line-fill me-1"></i>Tổng quan</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="ingredients-tab-btn" data-bs-toggle="tab" data-bs-target="#ingredientsTabPane" type="button" role="tab" aria-controls="ingredientsTabPane" aria-selected="true"><i class="bi bi-droplet-half me-1"></i>Nguyên vật liệu</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="suppliers-tab-btn" data-bs-toggle="tab" data-bs-target="#suppliersTabPane" type="button" role="tab" aria-controls="suppliersTabPane" aria-selected="false"><i class="bi bi-truck me-1"></i>Nhà cung cấp</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="create-transaction-tab-btn" data-bs-toggle="tab" data-bs-target="#createTransactionTabPane" type="button" role="tab" aria-controls="createTransactionTabPane" aria-selected="false"><i class="bi bi-file-earmark-plus me-1"></i>Tạo Phiếu Kho</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="transactions-history-tab-btn" data-bs-toggle="tab" data-bs-target="#transactionsHistoryTabPane" type="button" role="tab" aria-controls="transactionsHistoryTabPane" aria-selected="false"><i class="bi bi-list-check me-1"></i>Lịch sử Giao dịch</button>
        </li>
    </ul>

    <div class="tab-content" id="inventoryTabsContent">
        @* --- TAB DASHBOARD (PHIÊN BẢN HOÀN THIỆN VỚI GIAO DIỆN CHUYÊN NGHIỆP) --- *@
        <div class="tab-pane fade show active" id="dashboardTabPane" role="tabpanel" aria-labelledby="dashboard-tab-btn">

            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-5 g-4 mt-2">
                <div class="col">
                    <div class="card dashboard-kpi-card card-custom-blue text-white shadow-sm overflow-hidden h-100">
                        <div class="card-body">
                            <div class="card-title dashboard-title">Tổng Giá Trị Kho</div>
                            <div class="kpi-value" id="kpiTotalValue"><div class="spinner-border spinner-border-sm"></div></div>
                            <i class="bi bi-archive-fill kpi-icon"></i>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card dashboard-kpi-card card-custom-green text-white shadow-sm overflow-hidden h-100">
                        <div class="card-body">
                            <div class="card-title dashboard-title" id="kpi-revenue-title">Doanh Thu (Năm Nay)</div>
                            <div class="kpi-value" id="kpiRevenue"><div class="spinner-border spinner-border-sm"></div></div>
                            <i class="bi bi-graph-up-arrow kpi-icon"></i>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card dashboard-kpi-card card-custom-orange text-white shadow-sm overflow-hidden h-100">
                        <div class="card-body">
                            <div class="card-title dashboard-title" id="kpi-profit-title">Lợi Nhuận (Năm Nay)</div>
                            <div class="kpi-value" id="kpiProfit"><div class="spinner-border spinner-border-sm"></div></div>
                            <i class="bi bi-piggy-bank-fill kpi-icon"></i>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card dashboard-kpi-card card-custom-purple text-white shadow-sm overflow-hidden h-100">
                        <div class="card-body">
                            <div class="card-title dashboard-title" id="kpi-waste-title">Thất Thoát (Năm Nay)</div>
                            <div class="kpi-value" id="kpiWasteValue"><div class="spinner-border spinner-border-sm"></div></div>
                            <i class="bi bi-trash3-fill kpi-icon"></i>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card dashboard-kpi-card card-custom-red text-white shadow-sm overflow-hidden h-100">
                        <div class="card-body">
                            <div class="card-title dashboard-title">NVL Dưới Định Mức</div>
                            <div class="kpi-value" id="kpiLowStockItems"><div class="spinner-border spinner-border-sm"></div></div>
                            <i class="bi bi-exclamation-triangle-fill kpi-icon"></i>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-4">
                <div class="col-lg-8 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title m-0 me-2 dashboard-title">Lợi Nhuận Theo Tháng</h5>
                            <div class="d-flex align-items-center">
                                <label for="profit-chart-year-select" class="form-label me-2 mb-0 small">Năm:</label>
                                <select class="form-select form-select-sm w-auto" id="profit-chart-year-select"></select>
                            </div>
                        </div>
                        <div class="card-body">
                            <div style="height: 350px;" id="monthlyProfitChartContainer"><canvas id="monthlyProfitChart"></canvas></div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-header"><h5 class="card-title m-0 dashboard-title">Tỷ Trọng Giá Trị Tồn Kho</h5></div>
                        <div class="card-body d-flex align-items-center justify-content-center">
                            <div style="height: 350px; width: 100%;"><canvas id="inventoryValuePieChart"></canvas></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-4 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-header"><h5 class="card-title m-0 dashboard-title">Tổng Lợi Nhuận Qua Các Năm</h5></div>
                        <div class="card-body">
                            <div style="height: 320px;" id="annualProfitChartContainer"><canvas id="annualProfitChart"></canvas></div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-header"><h5 class="card-title m-0 dashboard-title">Cảnh Báo: NVL Cần Nhập Hàng</h5></div>
                        <div class="card-body">
                            <div style="height: 320px;" id="lowStockChartContainer"><canvas id="lowStockChart"></canvas></div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-header"><h5 class="card-title m-0 dashboard-title" id="waste-details-title">Chi Tiết NVL Thất Thoát (Năm Nay)</h5></div>
                        <div class="card-body">
                            <div id="topWastedContainer" class="table-responsive" style="height: 320px; overflow-y: auto;">
                                <table class="table table-sm table-hover">
                                    <thead class="table-light" style="position: sticky; top: 0;">
                                        <tr>
                                            <th scope="col">#</th>
                                            <th scope="col">Tên NVL</th>
                                            <th scope="col" class="text-end">SL</th>
                                            <th scope="col">ĐVT</th>
                                            <th scope="col" class="text-end">Giá trị</th>
                                        </tr>
                                    </thead>
                                    <tbody id="topWastedTableBody">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* --- TAB NGUYÊN VẬT LIỆU --- *@
        <div class="tab-pane fade" id="ingredientsTabPane" role="tabpanel" aria-labelledby="ingredients-tab-btn">
            <div class="card card-inventory">
                <div class="card-header">
                    <h5 class="card-title"><i class="bi bi-droplet-half me-2"></i>Danh sách Nguyên vật liệu</h5>
                    <button type="button" class="btn btn-primary text-nowrap" id="btnAddIngredient"><i class="bi bi-plus-circle me-1"></i>Thêm Mới</button>
                </div>
                <div class="card-body p-3">
                    <div class="dt-search-controls">
                        <div class="dt-search-input-group">
                            <label for="ingredientSearch" class="form-label">Tìm kiếm</label>
                            <input type="search" class="form-control dt-search" id="ingredientSearch" placeholder="Tên, mô tả, ĐVT...">
                        </div>
                        <div class="dt-controls-group">
                            <div class="dt-length-select-group">
                                <label for="ingredientsTableLength" class="form-label">Hiện</label>
                                <select id="ingredientsTableLength" name="ingredientsTableLength" class="form-select">
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                    <option value="-1">Tất cả</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive position-relative">
                        <div class="dataTables_processing_custom" id="ingredientsTable_processing">Đang xử lý...</div>
                        <table id="ingredientsTable" class="table table-hover" style="width:100%">
                            <thead>
                                <tr>
                                    <th style="width:40px;">STT</th>
                                    <th>Tên NVL</th>
                                    <th>Mô tả</th>
                                    <th>ĐVT</th>
                                    <th class="text-end">Tồn kho</th>
                                    <th class="text-end">Tồn tối thiểu</th>
                                    <th class="text-end">Giá nhập cuối</th>
                                    <th class="text-center">Trạng thái</th>
                                    <th>Cập nhật</th>
                                    <th class="text-center">Hành động</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        @* --- TAB NHÀ CUNG CẤP --- *@
        <div class="tab-pane fade" id="suppliersTabPane" role="tabpanel" aria-labelledby="suppliers-tab-btn">
            <div class="card card-inventory">
                <div class="card-header">
                    <h5 class="card-title"><i class="bi bi-truck me-2"></i>Danh sách Nhà cung cấp</h5>
                    <button type="button" class="btn btn-primary text-nowrap" id="btnAddSupplier"><i class="bi bi-plus-circle me-1"></i>Thêm Mới</button>
                </div>
                <div class="card-body p-3">
                    <div class="dt-search-controls">
                        <div class="dt-search-input-group">
                            <label for="supplierSearch" class="form-label">Tìm kiếm</label>
                            <input type="search" class="form-control dt-search" id="supplierSearch" placeholder="Tên, SĐT, email, địa chỉ...">
                        </div>
                        <div class="dt-controls-group">
                            <div class="dt-length-select-group">
                                <label for="suppliersTableLength" class="form-label">Hiện</label>
                                <select id="suppliersTableLength" name="suppliersTableLength" class="form-select">
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                    <option value="-1">Tất cả</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive position-relative">
                        <div class="dataTables_processing_custom" id="suppliersTable_processing">Đang xử lý...</div>
                        <table id="suppliersTable" class="table table-hover" style="width:100%">
                            <thead>
                                <tr>
                                    <th style="width:40px;">STT</th>
                                    <th>Tên NCC</th>
                                    <th>Người liên hệ</th>
                                    <th>Điện thoại</th>
                                    <th>Email</th>
                                    <th>Địa chỉ</th>
                                    <th>Cập nhật</th>
                                    <th class="text-center">Hành động</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        @* --- TAB TẠO PHIẾU KHO --- *@
        <div class="tab-pane fade" id="createTransactionTabPane" role="tabpanel" aria-labelledby="create-transaction-tab-btn">
            <div class="card card-inventory">
                <div class="card-header">
                    <h5 class="card-title"><i class="bi bi-file-earmark-plus me-2"></i>Tạo Phiếu Giao dịch Kho</h5>
                </div>
                <div class="card-body p-4">
                    <form id="createTransactionForm">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-label-group">
                                    <label for="transactionType" class="form-label">Loại giao dịch <span class="text-danger">*</span></label>
                                    <select id="transactionType" name="TransactionType" class="form-select" required>
                                        <option value="">-- Chọn loại giao dịch --</option>
                                        <option value="InitialStock">Tồn kho ban đầu</option>
                                        <option value="Purchase">Nhập mua hàng</option>
                                        <option value="AdjustmentIn">Điều chỉnh tăng</option>
                                        <option value="SaleConsumption">Xuất bán hàng (Thủ công)</option>
                                        <option value="AdjustmentOut">Điều chỉnh giảm</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-label-group">
                                    <label for="transactionIngredientId" class="form-label">Nguyên vật liệu <span class="text-danger">*</span></label>
                                    <select id="transactionIngredientId" name="IngredientId" class="form-select select2-custom" required style="width:100%;">
                                        <option value="">-- Tìm & chọn NVL --</option>
                                    </select>
                                    <small id="ingredientInfo" class="form-text fw-bold text-danger"></small>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-label-group">
                                    <label for="transactionDate" class="form-label">Ngày giao dịch</label>
                                    <input type="text" id="transactionDate" name="TransactionDate" class="form-control" readonly>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-label-group">
                                    <label for="transactionQuantity" class="form-label">Số lượng <span class="text-danger">*</span></label>
                                    <input type="number" id="transactionQuantity" name="Quantity" class="form-control" step="0.001" min="0.001" required>
                                </div>
                            </div>

                            <div class="col-md-4" id="transactionUnitPriceContainer">
                                <div class="form-label-group">
                                    <label for="transactionUnitPrice" class="form-label" id="transactionUnitPriceLabel">Đơn giá <span class="text-danger">*</span></label>
                                    <input type="number" id="transactionUnitPrice" name="UnitPrice" class="form-control" step="100" min="0">
                                </div>
                            </div>

                            <div class="col-md-4" id="transactionBatchContainer" style="display:none;">
                                <div class="form-label-group">
                                    <label for="transactionBatchId" class="form-label">Chọn lô hàng<span class="text-danger">*</span></label>
                                    <select id="transactionBatchId" name="BatchId" class="form-select select2-custom" style="width:100%;"></select>
                                </div>
                            </div>

                            <div class="col-md-4" id="transactionTotalPriceContainer">
                                <div class="form-label-group">
                                    <label for="transactionTotalPrice" class="form-label">Thành tiền</label>
                                    <input type="text" id="transactionTotalPrice" name="TotalPrice" class="form-control" readonly>
                                </div>
                            </div>

                            <div class="col-md-4" id="transactionSupplierContainer" style="display:none;">
                                <div class="form-label-group">
                                    <label for="transactionSupplierId" class="form-label">Nhà cung cấp <span class="text-danger">*</span></label>
                                    <select id="transactionSupplierId" name="SupplierId" class="form-select select2-custom" style="width:100%;">
                                        <option value="">-- Tìm & chọn NCC --</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="form-label-group">
                                    <label for="transactionNotes" class="form-label">Ghi chú</label>
                                    <textarea id="transactionNotes" name="Notes" class="form-control" rows="3"></textarea>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4">
                            <button type="submit" class="btn btn-success"><i class="bi bi-save me-1"></i>Lưu Phiếu</button>
                            <button type="reset" class="btn btn-outline-secondary ms-2"><i class="bi bi-arrow-counterclockwise me-1"></i>Làm lại</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        @* --- TAB LỊCH SỬ GIAO DỊCH --- *@
        <div class="tab-pane fade" id="transactionsHistoryTabPane" role="tabpanel" aria-labelledby="transactions-history-tab-btn">
            <div class="card card-inventory">
                <div class="card-header">
                    <h5 class="card-title"><i class="bi bi-list-check me-2"></i>Lịch sử Giao dịch Kho</h5>
                </div>
                <div class="card-body p-3">
                    <div class="row gx-2 gy-2 mb-3 transaction-history-filters">
                        <div class="col-md-3 col-sm-6 col-12">
                            <div class="form-label-group">
                                <label for="historyFromDate" class="form-label">Từ ngày</label>
                                <input type="text" class="form-control flatpickr-input" id="historyFromDate" placeholder="dd/mm/yyyy" />
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 col-12">
                            <div class="form-label-group">
                                <label for="historyToDate" class="form-label">Đến ngày</label>
                                <input type="text" class="form-control flatpickr-input" id="historyToDate" placeholder="dd/mm/yyyy" />
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 col-12">
                            <div class="form-label-group">
                                <label for="historyTransactionTypeFilter" class="form-label">Loại GD</label>
                                <select id="historyTransactionTypeFilter" class="form-select">
                                    <option value="" selected>Tất cả</option>
                                    <option value="InitialStock">Tồn kho ban đầu</option>
                                    <option value="Purchase">Nhập mua hàng</option>
                                    <option value="AdjustmentIn">Điều chỉnh tăng</option>
                                    <option value="SaleConsumption">Xuất bán hàng</option>
                                    <option value="AdjustmentOut">Điều chỉnh giảm</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 col-12">
                            <div class="form-label-group">
                                <label for="historyIngredientFilterId" class="form-label">Nguyên vật liệu</label>
                                <select id="historyIngredientFilterId" class="form-select select2-custom-filter" style="width:100%;"><option value="">Tất cả NVL</option></select>
                            </div>
                        </div>
                    </div>
                    <div class="dt-search-controls">
                        <div class="dt-search-input-group">
                            <label for="transactionHistorySearch" class="form-label">Tìm kiếm chung</label>
                            <input type="search" class="form-control dt-search" id="transactionHistorySearch" placeholder="NVL, NCC, người tạo, ghi chú, số phiếu...">
                        </div>
                        <div class="dt-controls-group">
                            <div class="dt-length-select-group">
                                <label for="transactionsHistoryTableLength" class="form-label">Hiện</label>
                                <select id="transactionsHistoryTableLength" name="transactionsHistoryTableLength" class="form-select">
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                    <option value="-1">Tất cả</option>
                                </select>
                            </div>
                            <button type="button" class="btn btn-outline-secondary btn-clear-filters" data-target-table="transactionsHistoryTable" title="Xóa tất cả bộ lọc">
                                <i class="bi bi-x-lg"></i> <span class="d-none d-sm-inline">Xóa bộ lọc</span>
                            </button>
                        </div>
                    </div>

                    <div class="table-responsive position-relative">
                        <div class="dataTables_processing_custom" id="transactionsHistoryTable_processing">Đang xử lý...</div>
                        <table id="transactionsHistoryTable" class="table table-hover" style="width:100%">
                            <thead>
                                <tr>
                                    <th style="width:40px;">STT</th>
                                    <th>Ngày</th>
                                    <th>Nguyên vật liệu</th>
                                    <th>Loại GD</th>
                                    <th class="text-end">Số lượng</th>
                                    <th>ĐVT</th>
                                    <th class="text-end">Đơn giá</th>
                                    <th class="text-end">Thành tiền</th>
                                    <th>NCC</th>
                                    <th>Người tạo</th>
                                    <th>Ghi chú</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* --- MODALS --- *@
<div class="modal fade" id="ingredientModal" tabindex="-1" aria-labelledby="ingredientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ingredientModalLabel">Nguyên vật liệu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <form id="ingredientForm">
                    <input type="hidden" id="ingredientId" name="Id">
                    <div class="form-label-group">
                        <label for="ingredientName" class="form-label">Tên Nguyên vật liệu <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="ingredientName" name="Name" required maxlength="150">
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-label-group">
                                <label for="ingredientUnitOfMeasure" class="form-label">Đơn vị tính <span class="text-danger">*</span></label>
                                <select class="form-select" id="ingredientUnitOfMeasure" name="UnitOfMeasure" required>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-label-group">
                                <label for="ingredientMinimumStockLevel" class="form-label">Tồn kho tối thiểu</label>
                                <input type="number" class="form-control" id="ingredientMinimumStockLevel" name="MinimumStockLevel" step="0.001" min="0">
                            </div>
                        </div>
                    </div>
                    <div class="form-label-group">
                        <label for="ingredientDescription" class="form-label">Mô tả</label>
                        <textarea class="form-control" id="ingredientDescription" name="Description" rows="3" maxlength="500"></textarea>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="ingredientIsActive" name="IsActive" checked>
                        <label class="form-check-label" for="ingredientIsActive">Đang hoạt động</label>
                    </div>

                    <div class="row mb-3 bg-light p-2 rounded border">
                        <div class="col-md-6">
                            <label class="form-label small text-muted mb-0">Tồn kho hiện tại:</label>
                            <p id="ingredientCurrentStockLevelDisplay" class="fw-bold mb-0">N/A</p>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label small text-muted mb-0">Giá nhập cuối:</label>
                            <p id="ingredientLastPurchasePriceDisplay" class="fw-bold mb-0">N/A</p>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle me-1"></i>Đóng</button>
                <button type="button" class="btn btn-primary" id="btnSaveIngredient"><i class="bi bi-save me-1"></i>Lưu thay đổi</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="supplierModal" tabindex="-1" aria-labelledby="supplierModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="supplierModalLabel">Nhà cung cấp</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <form id="supplierForm">
                    <input type="hidden" id="supplierId" name="Id">
                    <div class="form-label-group">
                        <label for="supplierName" class="form-label">Tên Nhà cung cấp <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="supplierName" name="Name" required maxlength="150">
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-label-group">
                                <label for="supplierContactPerson" class="form-label">Người liên hệ</label>
                                <input type="text" class="form-control" id="supplierContactPerson" name="ContactPerson" maxlength="100">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-label-group">
                                <label for="supplierPhoneNumber" class="form-label">Số điện thoại</label>
                                <input type="tel" class="form-control" id="supplierPhoneNumber" name="PhoneNumber" maxlength="20">
                            </div>
                        </div>
                    </div>
                    <div class="form-label-group">
                        <label for="supplierEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="supplierEmail" name="Email" maxlength="100">
                    </div>
                    <div class="form-label-group">
                        <label for="supplierAddress" class="form-label">Địa chỉ</label>
                        <input type="text" class="form-control" id="supplierAddress" name="Address" maxlength="250">
                    </div>
                    <div class="form-label-group">
                        <label for="supplierNotes" class="form-label">Ghi chú</label>
                        <textarea class="form-control" id="supplierNotes" name="Notes" rows="3" maxlength="500"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle me-1"></i>Đóng</button>
                <button type="button" class="btn btn-primary" id="btnSaveSupplier"><i class="bi bi-save me-1"></i>Lưu thay đổi</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="inventoryReportModal" tabindex="-1" aria-labelledby="inventoryReportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inventoryReportModalLabel"><i class="bi bi-file-earmark-spreadsheet me-2"></i>Tùy chọn Báo cáo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <form id="inventoryReportForm">
                    <div class="row">
                        <div class="col-12">
                            <div class="form-label-group">
                                <label for="reportIngredientIds" class="form-label">Chọn Nguyên vật liệu</label>
                                <select id="reportIngredientIds" name="IngredientIds" class="form-select select2-report" multiple="multiple" data-placeholder="-- Chọn một hoặc nhiều NVL (để trống là tất cả) --">
                                    <option></option>
                                </select>                                
                                <div class="mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-secondary" id="btnClearAllIngredients">Bỏ chọn tất cả</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <p class="fw-bold mb-2">Chọn khoảng thời gian báo cáo:</p>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-label-group">
                                <label for="reportFromDate" class="form-label">Từ ngày <span class="text-danger">*</span></label>
                                <input type="text" class="form-control flatpickr-input-report" id="reportFromDate" name="FromDate" placeholder="dd/mm/yyyy" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-label-group">
                                <label for="reportToDate" class="form-label">Đến ngày <span class="text-danger">*</span></label>
                                <input type="text" class="form-control flatpickr-input-report" id="reportToDate" name="ToDate" placeholder="dd/mm/yyyy" required>
                            </div>
                        </div>
                    </div>
                    <div class="mt-2 mb-3 time-shortcut-buttons">
                        <label class="form-label small">Chọn nhanh:</label>
                        <div class="btn-group btn-group-sm" role="group">
                            <button type="button" class="btn btn-outline-info" data-range="thisWeek">Tuần này</button>
                            <button type="button" class="btn btn-outline-info" data-range="thisMonth">Tháng này</button>
                            <button type="button" class="btn btn-outline-info" data-range="thisYear">Năm này</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle me-1"></i>Hủy</button>
                <button type="button" class="btn btn-info" id="btnPreviewInventoryReport"><i class="bi bi-eye me-1"></i>Xem trước</button>
                <button type="button" class="btn btn-success" id="btnExportInventoryToExcel"><i class="bi bi-file-earmark-excel me-1"></i>Tải xuống Excel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="previewReportModal" tabindex="-1" aria-labelledby="previewReportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewReportModalLabel">Bản xem trước Báo cáo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="previewReportModalBody" style="background-color: #f8f9fa;"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" id="btn-back-to-summary" style="display: none;">
                    <i class="bi bi-arrow-left me-1"></i> Quay lại danh sách
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-success" id="btnDownloadFromPreview">
                    <i class="bi bi-file-earmark-excel me-1"></i>Tải xuống Excel
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://npmcdn.com/flatpickr/dist/l10n/vn.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <partial name="_ValidationScriptsPartial" />

    @* SweetAlert2 & Notyf được giả định đã có trong Layout *@

    <script>
        // =============== HÀM TIỆN ÍCH (UTILITY FUNCTIONS) ===============
        function formatVnDynamicDecimal(value, maxFractionDigits = 3) {
            if (value === null || typeof value === 'undefined' || value === '') {
                return '-';
            }
            const number = parseFloat(value);
            if (isNaN(number)) {
                return (typeof value === 'string' && value.trim() !== '') ? value : '-';
            }
            return number.toLocaleString('vi-VN', {
                minimumFractionDigits: 0,
                maximumFractionDigits: maxFractionDigits
            });
        }

        function formatVnCurrency(value, showSymbol = true) {
            if (value === null || typeof value === 'undefined' || value === '') {
                return '-';
            }
            const number = parseFloat(value);
            if (isNaN(number)) {
                if (typeof value === 'string' && value.trim() !== '') {
                    return value.trim().endsWith('đ') ? value.trim() : '-';
                }
                return '-';
            }
            const formattedNumber = number.toLocaleString('vi-VN', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
            return showSymbol ? formattedNumber + ' đ' : formattedNumber;
        }

        function showSuccessToast(message) {
            if (typeof notyf !== 'undefined') {
                notyf.success({ message: message || 'Thao tác thành công!', duration: 5000 });
            } else if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: message || 'Thao tác thành công!',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                alert(message || 'Thao tác thành công!');
            }
        }

        function showErrorAlert(titleOrMessage, message) {
            let finalTitle = 'Lỗi';
            let finalMessage = titleOrMessage || 'Có lỗi xảy ra!';
            if (message) {
                finalTitle = titleOrMessage;
                finalMessage = message;
            }
            if (typeof notyf !== 'undefined') {
                notyf.error({ message: `<b>${finalTitle}</b><br>${finalMessage.replace(/\n/g, '<br>')}`, duration: 7000, dismissible: true });
            } else if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: finalTitle,
                    html: finalMessage.replace(/\n/g, '<br>')
                });
            }
            else {
                alert(`${finalTitle}: ${finalMessage}`);
            }
        }

        function showLoading(selector = 'body', message = 'Đang xử lý...') {
            const $target = $(selector);
            if ($target.length && $target.find('.loading-overlay').length === 0) {
                let positionStyle = $target.is('body') ? 'fixed' : 'absolute';
                if (positionStyle === 'absolute') {
                    const currentPosition = $target.css('position');
                    if (!['relative', 'absolute', 'fixed'].includes(currentPosition)) {
                        $target.css('position', 'relative');
                    }
                }
                const zIndex = (positionStyle === 'fixed') ? 1060 : ($target.css('z-index') === 'auto' ? 10 : (parseInt($target.css('z-index')) || 0) + 5);
                $target.append(`<div class="loading-overlay" style="position:${positionStyle}; inset:0; z-index:${zIndex}; display:flex; align-items:center; justify-content:center; background:rgba(255,255,255,0.7);"><div class="spinner-border text-primary spinner-border-sm me-2" role="status"></div><span>${message}</span></div>`);
            }
        }
        function hideLoading(selector = 'body') {
            setTimeout(() => {
                $(selector).find('.loading-overlay').fadeOut(150, function () { $(this).remove(); });
            }, 50);
        }

        function handleAjaxError(xhr, actionText) {
            hideLoading();
            console.error(`Lỗi ${actionText}:`, xhr.status, xhr.responseText);
            let errorMsg = `Không thể ${actionText.toLowerCase()}. Vui lòng thử lại.`;
            let errorTitle = 'Lỗi hệ thống';
            try {
                const responseJson = JSON.parse(xhr.responseText);
                if (responseJson) {
                    if (responseJson.message) errorMsg = responseJson.message;
                    if (responseJson.title) errorTitle = responseJson.title;
                    if (responseJson.errors) {
                        errorTitle = 'Dữ liệu không hợp lệ';
                        errorMsg = "Vui lòng kiểm tra lại thông tin:<br/>";
                        for (const key in responseJson.errors) {
                            const fieldName = key.charAt(0).toUpperCase() + key.slice(1);
                            errorMsg += `<b>${fieldName}:</b> ${responseJson.errors[key].join(', ')}<br/>`;
                        }
                    }
                }
            } catch (e) { /* Fallback */ }

            if (xhr.status === 400 && errorTitle === 'Lỗi hệ thống') errorTitle = 'Dữ liệu không hợp lệ';
            else if (xhr.status === 401) errorTitle = 'Chưa xác thực';
            else if (xhr.status === 403) errorTitle = 'Không có quyền';
            else if (xhr.status === 404) errorTitle = 'Không tìm thấy tài nguyên';
            else if (xhr.status === 409) errorTitle = 'Xung đột dữ liệu';
            else if (xhr.status >= 500) errorTitle = 'Lỗi máy chủ';

            showErrorAlert(errorTitle, errorMsg);
            return { title: errorTitle, message: errorMsg };
        }

        function debounce(func, delay) {
            let timer;
            return function (...args) {
                clearTimeout(timer);
                timer = setTimeout(() => func.apply(this, args), delay);
            };
        }

        function updateCustomPagination(tableInstance, paginationListSelector, pageInfoSelector) {
            if (!tableInstance) { console.warn("updateCustomPagination: tableInstance is null or undefined."); return; }
            const pageInfo = tableInstance.page.info();
            const $paginationList = $(paginationListSelector);
            const $pageInfoSpan = $(pageInfoSelector);
            const $paginationNav = $paginationList.closest('nav');

            $paginationList.find('.page-item.page-number').remove();
            $pageInfoSpan.hide().empty();
            $paginationNav.hide();

            if (pageInfo.recordsDisplay > 0) {
                $paginationNav.show();
                const startRecord = pageInfo.start + 1;
                const endRecord = pageInfo.end;
                const totalRecords = pageInfo.recordsDisplay;
                const totalRecordsUnfiltered = pageInfo.recordsTotal;

                let infoText = `Hiện ${startRecord.toLocaleString('vi-VN')}-${endRecord.toLocaleString('vi-VN')} / ${totalRecords.toLocaleString('vi-VN')} mục`;
                if (totalRecords !== totalRecordsUnfiltered) {
                    infoText += ` (lọc từ ${totalRecordsUnfiltered.toLocaleString('vi-VN')} mục)`;
                }
                $pageInfoSpan.html(infoText).show();

                if (pageInfo.pages > 1) {
                    $paginationList.find('.page-item').removeClass('disabled');
                    const currentPage = pageInfo.page;
                    const totalPages = pageInfo.pages;
                    const maxPagesToShow = 5;
                    let startPage, endPage;

                    if (totalPages <= maxPagesToShow) {
                        startPage = 0;
                        endPage = totalPages - 1;
                    } else {
                        const pagesBefore = Math.floor((maxPagesToShow - 3) / 2);
                        const pagesAfter = Math.ceil((maxPagesToShow - 3) / 2);

                        if (currentPage <= pagesBefore + 1) {
                            startPage = 0;
                            endPage = maxPagesToShow - 2;
                        } else if (currentPage + pagesAfter >= totalPages - 2) {
                            startPage = totalPages - (maxPagesToShow - 1);
                            endPage = totalPages - 1;
                        } else {
                            startPage = currentPage - pagesBefore;
                            endPage = currentPage + pagesAfter;
                        }
                    }
                    const prevButton = $paginationList.find('.page-item:has(.page-link:contains("<"))');
                    const nextButton = $paginationList.find('.page-item:has(.page-link:contains(">"))');

                    if (startPage > 0) {
                        const firstPageLink = $(`<li class="page-item page-number"><a class="page-link" href="#">1</a></li>`);
                        firstPageLink.insertBefore(nextButton);
                        if (startPage > 1) {
                            $('<li class="page-item disabled page-number"><span class="page-link">...</span></li>').insertBefore(nextButton);
                        }
                    }
                    for (let i = startPage; i <= endPage; i++) {
                        const pageNum = i + 1;
                        const $pageItem = $(`<li class="page-item page-number ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#">${pageNum}</a></li>`);
                        $pageItem.insertBefore(nextButton);
                    }
                    if (endPage < totalPages - 1) {
                        if (endPage < totalPages - 2) {
                            $('<li class="page-item disabled page-number"><span class="page-link">...</span></li>').insertBefore(nextButton);
                        }
                        const lastPageLink = $(`<li class="page-item page-number"><a class="page-link" href="#">${totalPages}</a></li>`);
                        lastPageLink.insertBefore(nextButton);
                    }
                    $paginationList.find('.page-item[id*="FirstPage"]').toggleClass('disabled', currentPage === 0);
                    prevButton.toggleClass('disabled', currentPage === 0);
                    nextButton.toggleClass('disabled', currentPage >= totalPages - 1);
                    $paginationList.find('.page-item[id*="LastPage"]').toggleClass('disabled', currentPage >= totalPages - 1);
                } else {
                    $paginationList.find('.page-item').addClass('disabled');
                }
            } else {
                $pageInfoSpan.text("(Không có mục nào)").show();
                $paginationNav.hide();
            }
        }

        function setupCustomPaginationEvents(tableInstance, paginationListSelector) {
            const $paginationNav = $(paginationListSelector).parent('nav');
            $paginationNav.off('click', 'a.page-link').on('click', 'a.page-link', function (e) {
                e.preventDefault();
                const $parentLi = $(this).closest('.page-item');
                if ($parentLi.hasClass('disabled') || $parentLi.hasClass('active') || !tableInstance) { return; }

                const parentId = $parentLi.attr('id');
                const pageNumText = $(this).text();

                if (parentId && parentId.includes('FirstPage')) { tableInstance.page('first').draw('page'); }
                else if (parentId && parentId.includes('PrevPage')) { tableInstance.page('previous').draw('page'); }
                else if (parentId && parentId.includes('NextPage')) { tableInstance.page('next').draw('page'); }
                else if (parentId && parentId.includes('LastPage')) { tableInstance.page('last').draw('page'); }
                else if (!isNaN(parseInt(pageNumText))) { tableInstance.page(parseInt(pageNumText) - 1).draw('page'); }
            });
        }

        if ($.validator) {
            $.validator.setDefaults({
                errorElement: 'div',
                errorClass: 'invalid-feedback d-block',
                highlight: function (element, errorClass, validClass) {
                    const $element = $(element);
                    $element.addClass('is-invalid').removeClass('is-valid');
                    if ($element.hasClass('select2-hidden-accessible')) {
                        $element.next('.select2-container').find('.select2-selection').addClass('is-invalid').removeClass('is-valid');
                    }
                },
                unhighlight: function (element, errorClass, validClass) {
                    const $element = $(element);
                    $element.removeClass('is-invalid');
                    if ($element.hasClass('select2-hidden-accessible')) {
                        $element.next('.select2-container').find('.select2-selection').removeClass('is-invalid');
                    }
                },
                success: function (label, element) {
                    const $element = $(element);
                    if ($element.val()) {
                        $element.addClass('is-valid');
                        if ($element.hasClass('select2-hidden-accessible')) {
                            $element.next('.select2-container').find('.select2-selection').addClass('is-valid');
                        }
                    }
                    label.remove();
                },
                errorPlacement: function (error, element) {
                    if (element.parent().hasClass('input-group') || element.parent().hasClass('form-floating')) {
                        error.insertAfter(element.parent());
                    } else if (element.hasClass('select2-hidden-accessible')) {
                        error.insertAfter(element.next('.select2-container'));
                    }
                    else {
                        error.insertAfter(element);
                    }
                }
            });
        }

        $(document).ready(function () {

            flatpickr('.flatpickr-input', { dateFormat: 'd/m/Y', locale: 'vn', allowInput: true });
            flatpickr('.flatpickr-input-report', { dateFormat: 'd/m/Y', locale: 'vn', allowInput: true, monthSelectorType: 'static' });

            $('#historyIngredientFilterId').select2({
                theme: "bootstrap-5",
                placeholder: 'Lọc theo NVL',
                allowClear: true,
                width: '100%',
                ajax: {
                    url: '@Url.Action("GetIngredientsForDropdown", "Inventory")',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) { return { searchTerm: params.term }; },
                    processResults: function (data) { return { results: data.map(item => ({ id: item.id, text: item.text })) }; },
                    cache: true
                }
            });

            function loadUnitsOfMeasure() {
                $.ajax({
                    url: '@Url.Action("GetUnitsOfMeasureForDropdown", "Inventory")', type: 'GET',
                    success: function (units) {
                        const $select = $('#ingredientUnitOfMeasure');
                        const currentValue = $select.val();
                        $select.empty().append($('<option>', { value: '', text: '-- Chọn ĐVT --' }));
                        units.forEach(unit => {
                            $select.append($('<option>', { value: unit.id, text: unit.text }));
                        });
                        if (currentValue) $select.val(currentValue);
                    },
                    error: function (xhr) { showErrorAlert('Lỗi tải ĐVT', 'Không thể tải danh sách đơn vị tính.'); }
                });
            }
            loadUnitsOfMeasure();

            let ingredientsTable = null;
            let suppliersTable = null;
            let transactionsHistoryTable = null;

            try {
                ingredientsTable = $('#ingredientsTable').DataTable({
                    language: { url: '//cdn.datatables.net/plug-ins/2.0.7/i18n/vi.json', processing: "" },
                    processing: false, serverSide: true, searching: false, lengthChange: false,
                    paging: true, pageLength: parseInt($('#ingredientsTableLength').val()) || 10, info: false,
                    ajax: {
                        url: '@Url.Action("GetIngredients", "Inventory")', type: 'POST',
                        data: function (d) {
                            d.length = parseInt($('#ingredientsTableLength').val()) || 10;
                            d.search.value = $('#ingredientSearch').val();
                            return d;
                        },
                        beforeSend: function () { $('#ingredientsTable_processing').show(); },
                        complete: function () { $('#ingredientsTable_processing').hide(); },
                        error: function (xhr) { handleAjaxError(xhr, 'tải danh sách nguyên vật liệu'); $('#ingredientsTable_processing').hide(); }
                    },
                    columns: [
                        { data: null, name: "STT", orderable: false, searchable: false, className: "text-center", render: function (data, type, row, meta) { return meta.settings._iDisplayStart + meta.row + 1; } },
                        { data: 'name', name: 'Name', render: function (data, type, row) { return data ? `<span class="dt-col-120-row-2" title="${row.name}">${row.name}</span>` : '-'; } },
                        { data: 'description', name: 'Description', orderable: false, render: function (data, type, row) { return data ? `<span class="dt-col-120-row-2" title="${row.description}">${row.description}</span>` : '-'; } },
                        { data: 'unitOfMeasure', name: 'UnitOfMeasure' },
                        { data: 'currentStockLevel', name: 'CurrentStockLevel', className: 'text-end', render: function (data) { return formatVnDynamicDecimal(data, 3); } },
                        { data: 'minimumStockLevel', name: 'MinimumStockLevel', className: 'text-end', render: function (data) { return formatVnDynamicDecimal(data, 3); } },
                        { data: 'lastPurchasePrice', name: 'LastPurchasePrice', className: 'text-end', render: function (data) { return formatVnCurrency(data); } },
                        { data: 'isActive', name: 'IsActive', className: 'text-center', orderable: true, render: function (data, type, row) { return `<span class="badge bg-${data ? 'success' : 'danger'} action-toggle-active" data-id="${row.id}" style="cursor:pointer;">${data ? 'Hoạt động' : 'Ngưng'}</span>`; } },
                        { data: 'updatedAt', name: 'UpdatedAt' },
                        { data: 'id', name: 'Actions', orderable: false, searchable: false, className: 'text-center dt-no-wrap', render: function (data) { return `<button class="btn btn-sm btn-info me-1 btn-edit-ingredient" data-id="${data}" title="Sửa"><i class="bi bi-pencil-fill"></i></button><button class="btn btn-sm btn-danger btn-delete-ingredient" data-id="${data}" title="Xóa"><i class="bi bi-trash-fill"></i></button>`; } }
                    ],
                    columnDefs: [
                        { targets: [0], width: '40px' },
                        { targets: [8], width: '120px' },
                        { targets: [9], width: '90px' }
                    ],
                    order: [[8, 'desc']], autoWidth: false, dom: 'rt',
                    drawCallback: function (settings) {
                        updateCustomPagination(this.api(), '#customPaginationIngredients', '#ingredientsTableInfo');
                        var tooltipTriggerElements = [].slice.call(document.querySelectorAll('#ingredientsTable [title]'));
                        tooltipTriggerElements.forEach(function (tooltipTriggerEl) {
                            var existingTooltip = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
                            if (existingTooltip) {
                                existingTooltip.dispose();
                            }
                            new bootstrap.Tooltip(tooltipTriggerEl);
                        });
                    }
                });
                $('#ingredientsTableLength').on('change', function () { ingredientsTable.page.len(parseInt($(this).val()) || 10).draw(); });
                $('#ingredientSearch').on('keyup', debounce(function () { ingredientsTable.search($(this).val()).draw(); }, 350));
                setupCustomPaginationEvents(ingredientsTable, '#customPaginationIngredients');
            } catch (e) { console.error("Lỗi khởi tạo Ingredients DataTable:", e); showErrorAlert("Lỗi Table", "Không thể khởi tạo bảng Nguyên vật liệu."); }

            try {
                suppliersTable = $('#suppliersTable').DataTable({
                    language: { url: '//cdn.datatables.net/plug-ins/2.0.7/i18n/vi.json', processing: "" },
                    processing: false, serverSide: true, searching: false, lengthChange: false,
                    paging: true, pageLength: parseInt($('#suppliersTableLength').val()) || 10, info: false,
                    ajax: {
                        url: '@Url.Action("GetSuppliers", "Inventory")', type: 'POST',
                        data: function (d) {
                            d.length = parseInt($('#suppliersTableLength').val()) || 10;
                            d.search.value = $('#supplierSearch').val();
                            return d;
                        },
                        beforeSend: function () { $('#suppliersTable_processing').show(); },
                        complete: function () { $('#suppliersTable_processing').hide(); },
                        error: function (xhr) { handleAjaxError(xhr, 'tải danh sách nhà cung cấp'); $('#suppliersTable_processing').hide(); }
                    },
                    columns: [
                        { data: null, name: "STT", orderable: false, searchable: false, className: "text-center", render: function (data, type, row, meta) { return meta.settings._iDisplayStart + meta.row + 1; } },
                        { data: 'name', name: 'Name', render: function (data, type, row) { return data ? `<span class="dt-col-180-row-3" title="${row.name}">${row.name}</span>` : '-'; } },
                        { data: 'contactPerson', name: 'ContactPerson', orderable: false, render: function (data) { return data || '-'; } },
                        { data: 'phoneNumber', name: 'PhoneNumber', orderable: false, render: function (data) { return data || '-'; } },
                        { data: 'email', name: 'Email', orderable: false, render: function (data) { return data || '-'; } },
                        { data: 'address', name: 'Address', orderable: false, render: function (data, type, row) { return data ? `<span class="dt-col-180-row-3" title="${row.address}">${row.address}</span>` : '-'; } },
                        { data: 'updatedAt', name: 'UpdatedAt' },
                        { data: 'id', name: 'Actions', orderable: false, searchable: false, className: 'text-center dt-no-wrap', render: function (data) { return `<button class="btn btn-sm btn-info me-1 btn-edit-supplier" data-id="${data}" title="Sửa"><i class="bi bi-pencil-fill"></i></button><button class="btn btn-sm btn-danger btn-delete-supplier" data-id="${data}" title="Xóa"><i class="bi bi-trash-fill"></i></button>`; } }
                    ],
                    columnDefs: [{ targets: [0], width: '40px' }, { targets: [6], width: '120px' }, { targets: [7], width: '90px' }],
                    order: [[6, 'desc']], autoWidth: false, dom: 'rt',
                    drawCallback: function (settings) {
                        updateCustomPagination(this.api(), '#customPaginationSuppliers', '#suppliersTableInfo');
                        var tooltipTriggerElements = [].slice.call(document.querySelectorAll('#suppliersTable [title]'));
                        tooltipTriggerElements.forEach(function (tooltipTriggerEl) {
                            var existingTooltip = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
                            if (existingTooltip) {
                                existingTooltip.dispose();
                            }
                            new bootstrap.Tooltip(tooltipTriggerEl);
                        });
                    }
                });
                $('#suppliersTableLength').on('change', function () { suppliersTable.page.len(parseInt($(this).val()) || 10).draw(); });
                $('#supplierSearch').on('keyup', debounce(function () { suppliersTable.search($(this).val()).draw(); }, 350));
                setupCustomPaginationEvents(suppliersTable, '#customPaginationSuppliers');
            } catch (e) { console.error("Lỗi khởi tạo Suppliers DataTable:", e); showErrorAlert("Lỗi Table", "Không thể khởi tạo bảng Nhà cung cấp."); }

            try {
                transactionsHistoryTable = $('#transactionsHistoryTable').DataTable({
                    language: { url: '//cdn.datatables.net/plug-ins/2.0.7/i18n/vi.json', processing: "" },
                    processing: false, serverSide: true, searching: false, lengthChange: false,
                    paging: true, pageLength: parseInt($('#transactionsHistoryTableLength').val()) || 10, info: false,
                    ajax: {
                        url: '@Url.Action("GetInventoryTransactions", "Inventory")', type: 'POST',
                        data: function (d) {
                            d.length = parseInt($('#transactionsHistoryTableLength').val()) || 10;
                            d.fromDate = $('#historyFromDate').val();
                            d.toDate = $('#historyToDate').val();
                            d.transactionTypeFilter = $('#historyTransactionTypeFilter').val();
                            d.ingredientFilterId = $('#historyIngredientFilterId').val();
                            d.search.value = $('#transactionHistorySearch').val();
                            return d;
                        },
                        beforeSend: function () { $('#transactionsHistoryTable_processing').show(); },
                        complete: function () { $('#transactionsHistoryTable_processing').hide(); },
                        error: function (xhr) { handleAjaxError(xhr, 'tải lịch sử giao dịch'); $('#transactionsHistoryTable_processing').hide(); }
                    },
                    columns: [
                        { data: null, name: "STT", orderable: false, searchable: false, className: "text-center", render: function (data, type, row, meta) { return meta.settings._iDisplayStart + meta.row + 1; } },
                        { data: 'transactionDate', name: 'TransactionDate' },
                        { data: 'ingredientName', name: 'IngredientName', render: function (data, type, row) { return `<span class="dt-col-120-row-2" title="${row.ingredientName}">${data || '-'}</span>` } },
                        { data: 'transactionTypeDisplay', name: 'TransactionType', render: function (data, type, row) { return `<span class="dt-col-120-row-2" title="${row.transactionTypeDisplay}">${data || '-'}</span>` } },
                        { data: 'quantityChanged', name: 'QuantityChanged', className: 'text-end', render: function (data) { return formatVnDynamicDecimal(data, 4); } },
                        { data: 'ingredientUnit', name: 'IngredientUnit', orderable: false, searchable: false, render: function (data) { return data || ''; } },
                        { data: 'unitPrice', name: 'UnitPrice', className: 'text-end', render: function (data) { return formatVnCurrency(data); } },
                        { data: 'totalPrice', name: 'TotalPrice', className: 'text-end', render: function (data) { return formatVnCurrency(data); } },
                        { data: 'supplierName', name: 'SupplierName', orderable: false, render: function (data, type, row) { return data ? `<span class="dt-col-120-row-2" title="${row.supplierName}">${data}</span>` : '-'; } },
                        { data: 'userName', name: 'UserName', orderable: false, render: function (data) { return data ? `<span class="dt-col-120-row-2" title="">${data}</span>` : '-'; } },
                        { data: 'notes', name: 'Notes', orderable: false, render: function (data, type, row) { return data ? `<span class="dt-col-180-row-3" title="${row.notes}">${data}</span>` : '-'; } }
                    ],
                    columnDefs: [{ targets: [0], width: '40px' }, { targets: [10], width: '150px' }],
                    order: [[1, 'desc']], autoWidth: false, dom: 'rt',
                    drawCallback: function (settings) {
                        updateCustomPagination(this.api(), '#customPaginationTransactions', '#transactionsHistoryTableInfo');
                        var tooltipTriggerElements = [].slice.call(document.querySelectorAll('#transactionsHistoryTable [title]'));
                        tooltipTriggerElements.forEach(function (tooltipTriggerEl) {
                            var existingTooltip = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
                            if (existingTooltip) {
                                existingTooltip.dispose();
                            }
                            new bootstrap.Tooltip(tooltipTriggerEl);
                        });
                    }
                });
                $('#transactionsHistoryTableLength').on('change', function () { transactionsHistoryTable.page.len(parseInt($(this).val()) || 10).draw(); });
                $('#historyFromDate, #historyToDate, #historyTransactionTypeFilter, #historyIngredientFilterId').on('change', function () { transactionsHistoryTable.draw(); });
                $('#transactionHistorySearch').on('keyup', debounce(function () { transactionsHistoryTable.search($(this).val()).draw(); }, 350));
                setupCustomPaginationEvents(transactionsHistoryTable, '#customPaginationTransactions');

            } catch (e) { console.error("Lỗi khởi tạo Transactions History DataTable:", e); showErrorAlert("Lỗi Table", "Không thể khởi tạo bảng Lịch sử Giao dịch."); }

            // ============== LOGIC CRUD NGUYÊN VẬT LIỆU ==============
            $('#btnAddIngredient').on('click', function () {
                $('#ingredientForm')[0].reset();
                $('#ingredientId').val('');
                $('#ingredientModalLabel').text('Thêm Nguyên vật liệu');
                $('#ingredientIsActive').prop('checked', true);
                $('#ingredientUnitOfMeasure').val('').trigger('change');
                $('#ingredientCurrentStockLevelDisplay').text('N/A');
                $('#ingredientLastPurchasePriceDisplay').text('N/A');
                $('#ingredientForm').validate().resetForm();
                $('.is-invalid, .is-valid').removeClass('is-invalid is-valid');
                var ingredientModal = new bootstrap.Modal(document.getElementById('ingredientModal'));
                ingredientModal.show();
            });

            $('#ingredientsTable tbody').on('click', '.btn-edit-ingredient', function () {
                const id = $(this).data('id');
                if (!id) { showErrorAlert("Lỗi", "Không tìm thấy ID nguyên vật liệu."); return; }
                showLoading('#ingredientModal .modal-body');
                $.ajax({
                    url: `@Url.Action("GetIngredient", "Inventory")/${id}`, type: 'GET',
                    success: function (response) {
                        if (response.success) {
                            const data = response.data;
                            $('#ingredientId').val(data.id);
                            $('#ingredientName').val(data.name);
                            $('#ingredientUnitOfMeasure').val(data.unitOfMeasure).trigger('change');
                            $('#ingredientMinimumStockLevel').val(data.minimumStockLevel !== null ? data.minimumStockLevel : '');
                            $('#ingredientDescription').val(data.description);
                            $('#ingredientIsActive').prop('checked', data.isActive);
                            $('#ingredientCurrentStockLevelDisplay').text(formatVnDynamicDecimal(data.currentStockLevel, 3) + ` ${data.unitOfMeasure || ''}`);
                            $('#ingredientLastPurchasePriceDisplay').text(formatVnCurrency(data.lastPurchasePrice));
                            $('#ingredientModalLabel').text('Cập nhật Nguyên vật liệu');
                            $('#ingredientForm').validate().resetForm();
                            $('.is-invalid, .is-valid').removeClass('is-invalid is-valid');
                            var ingredientModal = new bootstrap.Modal(document.getElementById('ingredientModal'));
                            ingredientModal.show();
                        } else { showErrorAlert('Lỗi tải dữ liệu', response.message || "Không thể tải chi tiết nguyên vật liệu."); }
                        hideLoading('#ingredientModal .modal-body');
                    },
                    error: function (xhr) { handleAjaxError(xhr, 'lấy thông tin nguyên vật liệu'); hideLoading('#ingredientModal .modal-body'); }
                });
            });

            $('#btnSaveIngredient').on('click', function () {
                if (!$('#ingredientForm').valid()) {
                    return;
                }
                const data = {
                    Id: $('#ingredientId').val() ? parseInt($('#ingredientId').val()) : 0,
                    Name: $('#ingredientName').val().trim(),
                    UnitOfMeasure: $('#ingredientUnitOfMeasure').val(),
                    MinimumStockLevel: $('#ingredientMinimumStockLevel').val() ? parseFloat($('#ingredientMinimumStockLevel').val()) : null,
                    Description: $('#ingredientDescription').val().trim(),
                    IsActive: $('#ingredientIsActive').is(':checked')
                };
                const url = data.Id ? '@Url.Action("UpdateIngredient", "Inventory")' : '@Url.Action("CreateIngredient", "Inventory")';
                const actionText = data.Id ? 'cập nhật nguyên vật liệu' : 'thêm nguyên vật liệu';
                showLoading('#ingredientModal .modal-content');
                $.ajax({
                    url: url, type: 'POST', contentType: 'application/json', data: JSON.stringify(data),
                    success: function (response) {
                        hideLoading('#ingredientModal .modal-content');
                        if (response.success) {
                            showSuccessToast(response.message);
                            bootstrap.Modal.getInstance(document.getElementById('ingredientModal')).hide();
                            if (ingredientsTable) ingredientsTable.draw(false);
                        } else {
                            if (response.errors) { handleAjaxError({ responseText: JSON.stringify(response), status: 400 }, actionText); }
                            else { showErrorAlert('Lỗi lưu', response.message || "Có lỗi xảy ra khi lưu."); }
                        }
                    },
                    error: function (xhr) { handleAjaxError(xhr, actionText); hideLoading('#ingredientModal .modal-content'); }
                });
            });

            $('#ingredientsTable tbody').on('click', '.btn-delete-ingredient', function () {
                const id = $(this).data('id');
                if (!id) { showErrorAlert("Lỗi", "Không tìm thấy ID nguyên vật liệu."); return; }
                let ingredientName = "đang chọn";
                const $row = $(this).closest('tr');
                if ($row.length > 0 && window.ingredientsTable) {
                    const rowData = ingredientsTable.row($row).data();
                    ingredientName = (rowData && rowData.name) ? rowData.name : ($row.find('td:eq(1)').text() || ingredientName);
                }

                Swal.fire({
                    title: 'Xác nhận xóa?',
                    text: `Bạn có chắc muốn xóa tạm nguyên vật liệu "${ingredientName}" không? Hành động này có thể ảnh hưởng đến các báo cáo cũ.`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33', cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="bi bi-trash-fill me-1"></i> Vẫn xóa',
                    cancelButtonText: '<i class="bi bi-x-lg me-1"></i>Hủy',
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return $.ajax({ url: `@Url.Action("DeleteIngredient", "Inventory")/${id}`, type: 'POST' })
                            .catch(xhr => {
                                Swal.showValidationMessage(`Yêu cầu thất bại: ${handleAjaxError(xhr, 'xóa').message}`);
                            });
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    if (result.isConfirmed && result.value) {
                        if (result.value.success) {
                            showSuccessToast(result.value.message || "Xóa thành công!");
                            if (window.ingredientsTable) ingredientsTable.draw(false);
                        } else if (result.value && result.value.message) {
                            showErrorAlert('Lỗi xóa', result.value.message);
                        }
                    }
                });
            });

            $('#ingredientsTable tbody').on('click', '.action-toggle-active', function () {
                const id = $(this).data('id');
                if (!id) { showErrorAlert("Lỗi", "Không tìm thấy ID nguyên vật liệu."); return; }

                const $badge = $(this);
                const isActive = $badge.hasClass('bg-success');
                const actionText = isActive ? 'vô hiệu hóa' : 'kích hoạt';
                let ingredientName = "NVL này";
                const $row = $(this).closest('tr');
                if ($row.length > 0 && window.ingredientsTable) {
                    const rowData = ingredientsTable.row($row).data();
                    ingredientName = (rowData && rowData.name) ? rowData.name : ($row.find('td:eq(1)').text() || ingredientName);
                }

                Swal.fire({
                    title: `Xác nhận ${actionText}?`,
                    text: `Bạn có muốn ${actionText} nguyên vật liệu "${ingredientName}" không?`,
                    icon: 'question', showCancelButton: true,
                    confirmButtonColor: isActive ? '#dc3545' : '#198754',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: `<i class="bi ${isActive ? 'bi-slash-circle-fill' : 'bi-check-circle-fill'} me-1"></i> Đồng ý`,
                    cancelButtonText: '<i class="bi bi-x-lg me-1"></i>Hủy',
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return $.ajax({ url: `@Url.Action("ToggleIngredientActive", "Inventory")/${id}`, type: 'POST' })
                            .catch(xhr => { Swal.showValidationMessage(`Yêu cầu thất bại: ${handleAjaxError(xhr, 'thay đổi trạng thái').message}`); });
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    if (result.isConfirmed && result.value) {
                        if (result.value.success) {
                            showSuccessToast(result.value.message || "Thay đổi trạng thái thành công!");
                            if (ingredientsTable) ingredientsTable.draw(false);
                        } else if (result.value && result.value.message) {
                            showErrorAlert('Thất bại', result.value.message);
                        }
                    }
                });
            });

            // ============== LOGIC CRUD NHÀ CUNG CẤP ==============
            $('#btnAddSupplier').on('click', function () {
                $('#supplierForm')[0].reset();
                $('#supplierId').val('');
                $('#supplierModalLabel').text('Thêm Nhà cung cấp');
                $('#supplierForm').validate().resetForm();
                $('.is-invalid, .is-valid').removeClass('is-invalid is-valid');
                var supplierModal = new bootstrap.Modal(document.getElementById('supplierModal'));
                supplierModal.show();
            });

            $('#suppliersTable tbody').on('click', '.btn-edit-supplier', function () {
                const id = $(this).data('id');
                if (!id) { showErrorAlert("Lỗi", "Không tìm thấy ID nhà cung cấp."); return; }
                showLoading('#supplierModal .modal-body');
                $.ajax({
                    url: `@Url.Action("GetSupplier", "Inventory")/${id}`, type: 'GET',
                    success: function (response) {
                        if (response.success) {
                            const data = response.data;
                            $('#supplierId').val(data.id);
                            $('#supplierName').val(data.name);
                            $('#supplierContactPerson').val(data.contactPerson);
                            $('#supplierPhoneNumber').val(data.phoneNumber);
                            $('#supplierEmail').val(data.email);
                            $('#supplierAddress').val(data.address);
                            $('#supplierNotes').val(data.notes);
                            $('#supplierModalLabel').text('Cập nhật Nhà cung cấp');
                            $('#supplierForm').validate().resetForm();
                            $('.is-invalid, .is-valid').removeClass('is-invalid is-valid');
                            var supplierModal = new bootstrap.Modal(document.getElementById('supplierModal'));
                            supplierModal.show();
                        } else { showErrorAlert('Lỗi tải dữ liệu', response.message || "Không thể tải chi tiết."); }
                        hideLoading('#supplierModal .modal-body');
                    },
                    error: function (xhr) { handleAjaxError(xhr, 'lấy thông tin NCC'); hideLoading('#supplierModal .modal-body'); }
                });
            });

            $('#btnSaveSupplier').on('click', function () {
                if (!$('#supplierForm').valid()) { return; }
                const data = {
                    Id: $('#supplierId').val() ? parseInt($('#supplierId').val()) : 0,
                    Name: $('#supplierName').val().trim(),
                    ContactPerson: $('#supplierContactPerson').val().trim() || null,
                    PhoneNumber: $('#supplierPhoneNumber').val().trim() || null,
                    Email: $('#supplierEmail').val().trim() || null,
                    Address: $('#supplierAddress').val().trim() || null,
                    Notes: $('#supplierNotes').val().trim() || null
                };
                const url = data.Id ? '@Url.Action("UpdateSupplier", "Inventory")' : '@Url.Action("CreateSupplier", "Inventory")';
                const actionText = data.Id ? 'cập nhật nhà cung cấp' : 'thêm nhà cung cấp';
                showLoading('#supplierModal .modal-content');
                $.ajax({
                    url: url, type: 'POST', contentType: 'application/json', data: JSON.stringify(data),
                    success: function (response) {
                        hideLoading('#supplierModal .modal-content');
                        if (response.success) {
                            showSuccessToast(response.message);
                            bootstrap.Modal.getInstance(document.getElementById('supplierModal')).hide();
                            if (suppliersTable) suppliersTable.draw(false);
                        } else {
                            if (response.errors) { handleAjaxError({ responseText: JSON.stringify(response), status: 400 }, actionText); }
                            else { showErrorAlert('Lỗi lưu', response.message || "Có lỗi xảy ra."); }
                        }
                    },
                    error: function (xhr) { handleAjaxError(xhr, actionText); hideLoading('#supplierModal .modal-content'); }
                });
            });

            $('#suppliersTable tbody').on('click', '.btn-delete-supplier', function () {
                const id = $(this).data('id');
                if (!id) { showErrorAlert("Lỗi", "Không tìm thấy ID nhà cung cấp."); return; }
                let supplierName = "đang chọn";
                const $row = $(this).closest('tr');
                if ($row.length > 0 && window.suppliersTable) {
                    const rowData = suppliersTable.row($row).data();
                    supplierName = (rowData && rowData.name) ? rowData.name : ($row.find('td:eq(1)').text() || supplierName);
                }
                Swal.fire({
                    title: 'Xác nhận xóa?',
                    text: `Bạn có chắc muốn xóa tạm nhà cung cấp "${supplierName}"?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33', cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="bi bi-trash-fill me-1"></i> Vẫn xóa',
                    cancelButtonText: '<i class="bi bi-x-lg me-1"></i>Hủy',
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return $.ajax({ url: `@Url.Action("DeleteSupplier", "Inventory")/${id}`, type: 'POST' })
                            .catch(xhr => { Swal.showValidationMessage(`Yêu cầu thất bại: ${handleAjaxError(xhr, 'xóa NCC').message}`); });
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    if (result.isConfirmed && result.value) {
                        if (result.value.success) {
                            showSuccessToast(result.value.message || "Xóa thành công!");
                            if (window.suppliersTable) suppliersTable.draw(false);
                        } else if (result.value && result.value.message) {
                            showErrorAlert('Lỗi xóa', result.value.message);
                        }
                    }
                });
            });

            // ========================================================
            // === LOGIC CHO TAB TẠO PHIẾU KHO (ĐÃ REFACTOR) ===
            // ========================================================

            const $transactionForm = $('#createTransactionForm');
            const $transactionType = $('#transactionType');
            const $ingredientSelect = $('#transactionIngredientId');
            const $batchSelect = $('#transactionBatchId');
            const $supplierSelect = $('#transactionSupplierId');
            const $unitPriceInput = $('#transactionUnitPrice');
            const $quantityInput = $('#transactionQuantity');
            const $supplierContainer = $('#transactionSupplierContainer');
            const $batchContainer = $('#transactionBatchContainer');

            function updateTransactionFormUI(type) {
                $supplierContainer.hide();
                $batchContainer.hide();
                $unitPriceInput.prop('readonly', false).val('');
                $('#transactionUnitPriceLabel').html('Đơn giá <span class="text-danger">*</span>');

                $supplierSelect.rules('remove', 'required');
                $batchSelect.rules('remove', 'required');
                $unitPriceInput.rules('remove', 'required');

                switch (type) {
                    case 'Purchase':
                    case 'InitialStock':
                        if (type === 'Purchase') {
                            $supplierContainer.show();
                            $supplierSelect.rules('add', { required: true });
                        }
                        $unitPriceInput.rules('add', { required: true });
                        break;

                    // *** SỬA LỖI: TÁCH RIÊNG LOGIC CHO XUẤT BÁN HÀNG ***
                    case 'SaleConsumption':
                        $batchContainer.show();
                        $batchSelect.rules('add', { required: true });
                        $unitPriceInput.prop('readonly', false).rules('add', { required: true }); // Cho phép sửa và bắt buộc nhập
                        $('#transactionUnitPriceLabel').html('Đơn giá bán <span class="text-danger">*</span>'); // Đổi nhãn cho rõ ràng
                        loadBatchesForIngredient();
                        break;

                    case 'AdjustmentIn':
                    case 'AdjustmentOut':
                        $batchContainer.show();
                        $batchSelect.rules('add', { required: true });
                        $unitPriceInput.prop('readonly', true); // Khóa lại vì dùng giá vốn
                        $('#transactionUnitPriceLabel').text('Đơn giá (tự động)');
                        loadBatchesForIngredient();
                        break;
                }

                if ($transactionForm.data('validator')) {
                    $transactionForm.validate().resetForm();
                }
                $('.is-invalid, .is-valid').removeClass('is-invalid is-valid');
            }

            function loadBatchesForIngredient() {
                const ingredientId = $ingredientSelect.val();
                const transactionType = $transactionType.val();
                if ($batchSelect.hasClass("select2-hidden-accessible")) {
                    $batchSelect.select2('destroy');
                }
                $batchSelect.empty().prop('disabled', true);
                const shouldLoadBatches = ['AdjustmentIn', 'AdjustmentOut', 'SaleConsumption'].includes(transactionType) && ingredientId;
                if (!shouldLoadBatches) {
                    $batchContainer.hide();
                    return;
                }
                $batchContainer.show();
                $batchSelect.html($('<option>').text('Đang tải danh sách lô...'));
                $.ajax({
                    url: `@Url.Action("GetBatchesForIngredient", "Inventory")?ingredientId=${ingredientId}`,
                    type: 'GET',
                    success: function (batches) {
                        $batchSelect.empty();
                        const placeholderText = (batches && batches.length > 0) ? '-- Chọn lô hàng --' : 'Không có lô nào phù hợp';
                        $batchSelect.append($('<option>', { value: '', text: placeholderText }));
                        if (batches && batches.length > 0) {
                            batches.forEach(batch => {
                                const $option = $('<option>', { value: batch.id, text: batch.text });
                                $option.data('price', batch.price);
                                $batchSelect.append($option);
                            });
                            $batchSelect.prop('disabled', false);
                        }
                        $batchSelect.select2({
                            theme: "bootstrap-5",
                            placeholder: placeholderText,
                            dropdownParent: $transactionForm
                        });
                    },
                    error: function () {
                        showErrorAlert('Lỗi tải lô hàng');
                        $batchSelect.empty().append($('<option>', { value: '', text: 'Lỗi khi tải' }));
                        $batchSelect.select2({
                            theme: "bootstrap-5",
                            placeholder: 'Lỗi khi tải',
                            dropdownParent: $transactionForm
                        });
                    }
                });
            }

            function calculateTotalPrice() {
                const quantity = parseFloat($quantityInput.val());
                const unitPrice = parseFloat($unitPriceInput.val());
                $('#transactionTotalPrice').val((!isNaN(quantity) && !isNaN(unitPrice) && quantity > 0 && unitPrice >= 0) ? formatVnCurrency(quantity * unitPrice, false) : '');
            }

            $supplierSelect.select2({
                theme: "bootstrap-5", placeholder: 'Tìm & chọn nhà cung cấp', allowClear: true, width: '100%', dropdownParent: $transactionForm,
                ajax: { url: '@Url.Action("GetSuppliersForDropdown", "Inventory")', dataType: 'json', delay: 250, data: p => ({ searchTerm: p.term }), processResults: d => ({ results: d.map(i => ({ id: i.id, text: i.text })) }), cache: true }
            });

            $ingredientSelect.select2({
                theme: "bootstrap-5", placeholder: 'Tìm & chọn nguyên vật liệu', allowClear: true, width: '100%', dropdownParent: $transactionForm,
                ajax: { url: '@Url.Action("GetIngredientsForDropdown", "Inventory")', dataType: 'json', delay: 250, data: p => ({ searchTerm: p.term }), processResults: d => ({ results: d.map(i => ({ id: i.id, text: i.text, unit: i.unit, currentStock: i.currentStock })) }), cache: true }
            }).on('select2:select', function (e) {
                const selectedData = e.params.data;
                if (selectedData) { $('#ingredientInfo').text(`Tồn: ${formatVnDynamicDecimal(selectedData.currentStock, 3)} ${selectedData.unit || ''}`); }
                updateTransactionFormUI($transactionType.val());
                $(this).valid();
            }).on('select2:unselect', function () {
                $('#ingredientInfo').text('');
                updateTransactionFormUI($transactionType.val());
                $unitPriceInput.val('');
                calculateTotalPrice();
            });

            $transactionType.on('change', function () { updateTransactionFormUI($(this).val()); });

            $batchSelect.on('change', function () {
                // *** SỬA LỖI: Chỉ tự điền giá khi không phải là xuất bán hàng ***
                const transactionType = $transactionType.val();
                if (transactionType !== 'SaleConsumption') {
                    const price = $(this).find('option:selected').data('price');
                    $unitPriceInput.val(price !== undefined ? price : '');
                }
                calculateTotalPrice();
                $(this).valid();
            });

            $quantityInput.on('input', calculateTotalPrice);
            $unitPriceInput.on('input', function () { if (!$(this).is('[readonly]')) { calculateTotalPrice(); } });

            function updateTransactionDateTime() {
                const now = new Date();
                const dt = ('0' + now.getDate()).slice(-2) + '/' + ('0' + (now.getMonth() + 1)).slice(-2) + '/' + now.getFullYear() + ' ' + ('0' + now.getHours()).slice(-2) + ':' + ('0' + now.getMinutes()).slice(-2) + ':' + ('0' + now.getSeconds()).slice(-2);
                $('#transactionDate').val(dt);
            }
            updateTransactionDateTime();
            setInterval(updateTransactionDateTime, 1000);

            $transactionForm.validate({
                rules: {
                    TransactionType: { required: true },
                    IngredientId: { required: true },
                    Quantity: { required: true, number: true, min: 0.0001 },
                    UnitPrice: { number: true, min: 0 }
                },
                messages: {
                    TransactionType: "Vui lòng chọn loại giao dịch.",
                    IngredientId: "Vui lòng chọn nguyên vật liệu.",
                    Quantity: { required: "Vui lòng nhập số lượng.", number: "Số lượng phải là số.", min: "Số lượng phải lớn hơn 0." },
                    UnitPrice: { required: "Vui lòng nhập đơn giá bán.", number: "Đơn giá phải là số.", min: "Đơn giá không được âm." },
                    SupplierId: "Vui lòng chọn nhà cung cấp.",
                    BatchId: "Vui lòng chọn lô hàng."
                },
                ignore: ":hidden:not(.select2-hidden-accessible)"
            });
            updateTransactionFormUI('');

            $transactionForm.on('submit', function (e) {
                e.preventDefault();
                if (!$transactionForm.valid()) {
                    showErrorAlert("Dữ liệu không hợp lệ", "Vui lòng kiểm tra lại các trường thông tin được đánh dấu đỏ.");
                    return;
                }
                const formData = {
                    IngredientId: parseInt($('#transactionIngredientId').val()),
                    TransactionType: $('#transactionType').val(),
                    Quantity: parseFloat($('#transactionQuantity').val()),
                    UnitPrice: $('#transactionUnitPrice').val() ? parseFloat($('#transactionUnitPrice').val()) : null,
                    SupplierId: $('#transactionSupplierId').val() ? parseInt($('#transactionSupplierId').val()) : null,
                    BatchId: $('#transactionBatchId').val() ? parseInt($('#transactionBatchId').val()) : null,
                    Notes: $('#transactionNotes').val().trim() || null
                };
                showLoading('#createTransactionTabPane .card-body');
                $.ajax({
                    url: '@Url.Action("CreateInventoryTransaction", "Inventory")', type: 'POST',
                    contentType: 'application/json', data: JSON.stringify(formData),
                    success: function (response) {
                        hideLoading('#createTransactionTabPane .card-body');
                        if (response.success) {
                            showSuccessToast(response.message);
                            $transactionForm.trigger('reset');
                            if (transactionsHistoryTable) transactionsHistoryTable.draw();
                            if (ingredientsTable) ingredientsTable.draw(false);
                            if (typeof loadDashboardData === 'function') loadDashboardData();
                        } else {
                            if (response.errors) { handleAjaxError({ responseText: JSON.stringify(response), status: 400 }, 'tạo phiếu kho'); }
                            else { showErrorAlert('Lỗi tạo phiếu', response.message || "Có lỗi xảy ra khi tạo phiếu kho."); }
                        }
                    },
                    error: function (xhr) { handleAjaxError(xhr, 'tạo phiếu kho'); hideLoading('#createTransactionTabPane .card-body'); }
                });
            });

            $transactionForm.on('reset', function () {
                setTimeout(() => {
                    $('#ingredientInfo').text('');
                    $ingredientSelect.val(null).trigger('change');
                    $supplierSelect.val(null).trigger('change');
                    if ($batchSelect.hasClass("select2-hidden-accessible")) {
                        $batchSelect.select2('destroy');
                    }
                    $batchSelect.empty();
                    updateTransactionFormUI('');
                }, 0);
            });

            // ============== LOGIC BÁO CÁO (ĐÃ SỬA LỖI VÀ TÁI CẤU TRÚC) ==============

            // --- 1. Khai báo biến và khởi tạo các đối tượng ---
            var inventoryReportModalEl = document.getElementById('inventoryReportModal');
            var inventoryReportModal = new bootstrap.Modal(inventoryReportModalEl);
            var previewModal = new bootstrap.Modal(document.getElementById('previewReportModal'));

            // --- 2. Khởi tạo các thư viện (Select2, Validate) ---
            $('#reportIngredientIds').select2({
                theme: "bootstrap-5",
                width: '100%',
                placeholder: "-- Chọn một hoặc nhiều NVL (để trống là tất cả) --",
                allowClear: true,
                dropdownParent: $('#inventoryReportModal'), // Rất quan trọng để dropdown hiển thị đúng trong modal
                ajax: {
                    url: '@Url.Action("GetAllIngredientsForReportFilter", "Inventory")',
                    dataType: 'json',
                    processResults: function (data) {
                        return {
                            results: data.map(item => ({ id: item.id, text: item.text }))
                        };
                    },
                    cache: true
                }
            });

            $('#inventoryReportForm').validate({
                rules: { FromDate: { required: true }, ToDate: { required: true } },
                messages: { FromDate: "Vui lòng chọn ngày bắt đầu.", ToDate: "Vui lòng chọn ngày kết thúc." }
            });


            // --- 3. Gán các sự kiện (Event Listeners) ---

            // Sự kiện khi modal Báo cáo ĐÃ hiển thị xong
            $(inventoryReportModalEl).one('shown.bs.modal', function (event) {
                // Reset Select2 tại đây là cách đáng tin cậy nhất
                $('#reportIngredientIds').val(null).trigger('change');
            });

            // Sự kiện khi modal Xem trước bị đóng
            document.getElementById('previewReportModal').addEventListener('hidden.bs.modal', function (event) {
                $('#previewReportModalBody').empty();
                $('#btnDownloadFromPreview').show();
                $('#btn-back-to-summary').hide();
            });

            // Sự kiện click cho nút "Báo cáo & Xuất file"
            $('#btnOpenInventoryReportModal').on('click', function () {
                $('#inventoryReportForm')[0].reset();
                const today = new Date();
                const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);

                // Set ngày mặc định cho flatpickr
                if (document.getElementById('reportFromDate')._flatpickr) {
                    document.getElementById('reportFromDate')._flatpickr.setDate(firstDayOfMonth, true);
                }
                if (document.getElementById('reportToDate')._flatpickr) {
                    document.getElementById('reportToDate')._flatpickr.setDate(today, true);
                }

                // Chỉ cần show modal, việc reset Select2 đã có 'shown.bs.modal' xử lý
                inventoryReportModal.show();
            });

            // Các sự kiện click khác
            $('#btnClearAllIngredients').on('click', function () {
                $('#reportIngredientIds').val(null).trigger('change');
            });

            $('.time-shortcut-buttons .btn').on('click', function () {
                const range = $(this).data('range');
                let fromDate, toDate = new Date();
                const today = new Date();
                const currentYear = today.getFullYear();
                const currentMonth = today.getMonth();
                const currentDayOfWeek = today.getDay();

                switch (range) {
                    case 'thisWeek':
                        fromDate = new Date(today);
                        fromDate.setDate(today.getDate() - currentDayOfWeek + (currentDayOfWeek === 0 ? -6 : 1));
                        toDate = new Date(fromDate);
                        toDate.setDate(fromDate.getDate() + 6);
                        break;
                    case 'thisMonth':
                        fromDate = new Date(currentYear, currentMonth, 1);
                        toDate = new Date(currentYear, currentMonth + 1, 0);
                        break;
                    case 'thisYear':
                        fromDate = new Date(currentYear, 0, 1);
                        toDate = new Date(currentYear, 11, 31);
                        break;
                }

                if (fromDate && document.getElementById('reportFromDate')._flatpickr) {
                    document.getElementById('reportFromDate')._flatpickr.setDate(fromDate, true);
                }
                if (toDate && document.getElementById('reportToDate')._flatpickr) {
                    document.getElementById('reportToDate')._flatpickr.setDate(toDate, true);
                }
            });

            $('#btnExportInventoryToExcel, #btnDownloadFromPreview').on('click', function () {
                if (!$('#inventoryReportForm').valid()) {
                    showErrorAlert("Thiếu thông tin", "Vui lòng chọn đầy đủ Từ ngày và Đến ngày trong form tùy chọn báo cáo.");
                    return;
                }
                const fromDateVal = $('#reportFromDate').val(), toDateVal = $('#reportToDate').val();
                const fromDateParts = fromDateVal.split('/'), toDateParts = toDateVal.split('/');
                const fromDateISO = `${fromDateParts[2]}-${fromDateParts[1]}-${fromDateParts[0]}T00:00:00`;
                const toDateISO = `${toDateParts[2]}-${toDateParts[1]}-${toDateParts[0]}T23:59:59`;
                const selectedIngredientIds = $('#reportIngredientIds').val();

                showLoading('body', 'Đang tạo file Excel...');

                var $form = $('<form>').attr({ method: "post", action: '@Url.Action("ExportInventoryDetailReport", "Inventory")' });
                $form.append($("<input>", { type: "hidden", name: "fromDate", value: fromDateISO }));
                $form.append($("<input>", { type: "hidden", name: "toDate", value: toDateISO }));
                if (selectedIngredientIds && selectedIngredientIds.length > 0) {
                    selectedIngredientIds.forEach(id => $form.append($("<input>", { type: "hidden", name: "ingredientIds", value: id })));
                }
                $form.appendTo('body').submit().remove();
                setTimeout(() => hideLoading('body'), 3000);
            });

            $('#btnPreviewInventoryReport').on('click', function () {
                if (!$('#inventoryReportForm').valid()) {
                    showErrorAlert("Thiếu thông tin", "Vui lòng chọn đầy đủ Từ ngày và Đến ngày.");
                    return;
                }
                const fromDateVal = $('#reportFromDate').val(), toDateVal = $('#reportToDate').val();
                const fromDateParts = fromDateVal.split('/'), toDateParts = toDateVal.split('/');
                const fromDateISO = `${fromDateParts[2]}-${fromDateParts[1]}-${fromDateParts[0]}T00:00:00`;
                const toDateISO = `${toDateParts[2]}-${toDateParts[1]}-${toDateParts[0]}T23:59:59`;
                const selectedIngredientIds = $('#reportIngredientIds').val();

                $('#previewReportModalBody').html('<div class="d-flex justify-content-center p-5"><div class="spinner-border text-primary" role="status"></div></div>');
                previewModal.show();
                inventoryReportModal.hide();

                $.ajax({
                    url: '@Url.Action("PreviewInventoryReport", "Inventory")', type: 'POST',
                    data: { fromDate: fromDateISO, toDate: toDateISO, ingredientIds: selectedIngredientIds },
                    success: function (response) {
                        $('#previewReportModalBody').html(response);
                    },
                    error: function (xhr) {
                        handleAjaxError(xhr, "tạo bản xem trước");
                        $('#previewReportModalBody').html('<div class="alert alert-danger m-3">Không thể tạo bản xem trước.</div>');
                    }
                });
            });

            $('#previewReportModalBody').on('click', '.btn-view-detail', function () {
                const ingredientId = $(this).data('id');
                const fromDateVal = $('#reportFromDate').val(), toDateVal = $('#reportToDate').val();
                const fromDateParts = fromDateVal.split('/'), toDateParts = toDateVal.split('/');
                const fromDateISO = `${fromDateParts[2]}-${fromDateParts[1]}-${fromDateParts[0]}T00:00:00`;
                const toDateISO = `${toDateParts[2]}-${toDateParts[1]}-${toDateParts[0]}T23:59:59`;

                $('#btnDownloadFromPreview').hide();
                $('#btn-back-to-summary').show();
                $('#previewReportModalBody').html('<div class="d-flex justify-content-center p-5"><div class="spinner-border text-primary" role="status"></div></div>');

                $.ajax({
                    url: '@Url.Action("PreviewIngredientDetail", "Inventory")', type: 'POST',
                    data: { ingredientId: ingredientId, fromDate: fromDateISO, toDate: toDateISO },
                    success: function (response) { $('#previewReportModalBody').html(response); },
                    error: function (xhr) {
                        handleAjaxError(xhr, "tải chi tiết");
                        $('#previewReportModalBody').html('<div class="alert alert-danger m-3">Không thể tải chi tiết.</div>');
                    }
                });
            });

            $('#previewReportModal').on('click', '#btn-back-to-summary', function () {
                $('#btnDownloadFromPreview').show();
                $('#btn-back-to-summary').hide();
                $('#btnPreviewInventoryReport').trigger('click');
            });

            // ========================================================
            // === LOGIC CHO TAB TỔNG QUAN (DASHBOARD) ===
            // ========================================================

            // --- A. KHỞI TẠO TIÊU ĐỀ ĐỘNG ---
            function initializeDynamicTitles() {
                const year = new Date().getFullYear();
                $('#kpi-revenue-title').text(`Doanh Thu (${year})`);
                $('#kpi-profit-title').text(`Lợi Nhuận (${year})`);
                $('#kpi-waste-title').text(`Thất Thoát (${year})`);
                $('#waste-details-title').text(`Chi Tiết NVL Thất Thoát (${year})`);
            }

            // --- B. KHAI BÁO BIẾN TOÀN CỤC CHO CÁC BIỂU ĐỒ ---
            var inventoryValuePieChart, lowStockChart, monthlyProfitChart, annualProfitChart;

            // --- C. CÁC HÀM TIỆN ÍCH VÀ ĐỊNH DẠNG ---

            const formatCurrencyFull = (value) => {
                if (value === null || typeof value === 'undefined') return '0 ₫';
                return new Intl.NumberFormat('vi-VN').format(value) + ' ₫';
            };

            const formatCurrencySmart = (value) => {
                const num = Number(value);
                if (isNaN(num)) return '0 ₫';
                if (Math.abs(num) < 1000000) return formatCurrencyFull(num);
                const suffixes = [{ value: 1e9, symbol: " tỷ" }, { value: 1e6, symbol: " triệu" }];
                const selectedSuffix = suffixes.find(s => Math.abs(num) >= s.value);
                if (selectedSuffix) {
                    const scaled = num / selectedSuffix.value;
                    const formatted = new Intl.NumberFormat('vi-VN', { minimumFractionDigits: 0, maximumFractionDigits: 1 }).format(scaled);
                    return formatted.replace(/\,0$/, '') + selectedSuffix.symbol;
                }
                return formatCurrencyFull(num);
            };

            const formatNumber = (value, decimals = 0) => {
                if (value === null || typeof value === 'undefined') return '0';
                return new Intl.NumberFormat('vi-VN', { minimumFractionDigits: decimals, maximumFractionDigits: decimals }).format(value);
            };

            function formatDynamicNumber(value) {
                if (value == null) return '-';
                const num = Number(value);
                if (isNaN(num)) return '-';
                // toLocaleString tự động xử lý việc bỏ các số 0 không cần thiết ở cuối
                return num.toLocaleString('vi-VN', {
                    maximumFractionDigits: 3 // Hiển thị tối đa 3 chữ số thập phân nếu có
                });
            }

            function updateKpiCard(elementId, value) {
                const element = $(elementId);
                const formattedText = formatCurrencySmart(value);
                element.text(formattedText);
            }

            // --- D. CÁC HÀM TẢI DỮ LIỆU VÀ VẼ/TẠO GIAO DIỆN ---

            function loadDashboardData() {
                showLoading('#dashboardTabPane .row-cols-1');
                const url = '@Url.Action("GetDashboardData", "Inventory")';
                $.get(url).done(function (data) {
                    updateKpiCard('#kpiTotalValue', data.totalInventoryValue);
                    updateKpiCard('#kpiRevenue', data.last30DaysRevenue);
                    updateKpiCard('#kpiProfit', data.last30DaysProfit);
                    updateKpiCard('#kpiWasteValue', data.wasteValueThisYear);
                    $('#kpiLowStockItems').text(formatNumber(data.lowStockItemsCount) + ' loại');
                    drawPieChart(data.inventoryValueDistribution);
                    drawLowStockChart(data.lowStockIngredients);
                }).fail(function () {
                    showErrorAlert("Lỗi tải dữ liệu", "Không thể tải dữ liệu KPIs.");
                }).always(function () {
                    hideLoading('#dashboardTabPane .row-cols-1');
                });
            }

            function loadAnnualProfitChart(year) {
                if (!year) return;
                showLoading('#monthlyProfitChartContainer');
                const url = `@Url.Action("GetMonthlyProfitByYear", "Inventory")?year=${year}`;
                $.get(url).done(function (data) {
                    if (monthlyProfitChart instanceof Chart) monthlyProfitChart.destroy();
                    const ctx = document.getElementById('monthlyProfitChart').getContext('2d');
                    monthlyProfitChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: data.map(d => d.label),
                            datasets: [{ label: `Lợi nhuận năm ${year}`, data: data.map(d => d.value), backgroundColor: '#5d87ff', borderRadius: 5, barThickness: 20 }]
                        },
                        options: {
                            responsive: true, maintainAspectRatio: false,
                            scales: {
                                y: { beginAtZero: true, ticks: { callback: (value) => formatCurrencySmart(value).replace(' ₫', '') } },
                                x: { grid: { display: false } }
                            },
                            plugins: { legend: { display: false }, tooltip: { callbacks: { label: (context) => `Lợi nhuận: ${formatCurrencyFull(context.parsed.y)}` } } }
                        }
                    });
                }).fail(function () {
                    showErrorAlert("Lỗi", `Không thể tải dữ liệu lợi nhuận cho năm ${year}.`);
                }).always(function () {
                    hideLoading('#monthlyProfitChartContainer');
                });
            }

            function loadAnnualProfitSummaryChart() {
                showLoading('#annualProfitChartContainer');
                const url = '@Url.Action("GetAnnualProfitSummary", "Inventory")';
                $.get(url).done(function (data) {
                    if (annualProfitChart instanceof Chart) annualProfitChart.destroy();
                    const ctx = document.getElementById('annualProfitChart').getContext('2d');
                    annualProfitChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: data.map(d => d.label),
                            datasets: [{ label: 'Tổng lợi nhuận', data: data.map(d => d.value), backgroundColor: data.map(d => d.label === new Date().getFullYear().toString() ? '#13deb9' : '#ffab00'), borderRadius: 5, barThickness: 30 }]
                        },
                        options: {
                            responsive: true, maintainAspectRatio: false,
                            scales: {
                                y: { beginAtZero: true, ticks: { callback: (value) => formatCurrencySmart(value).replace(' ₫', '') } },
                                x: { grid: { display: false } }
                            },
                            plugins: { legend: { display: false }, tooltip: { callbacks: { label: (context) => `Năm ${context.label}: ${formatCurrencyFull(context.parsed.y)}` } } }
                        }
                    });
                }).fail(function () {
                    showErrorAlert("Lỗi", "Không thể tải dữ liệu lợi nhuận qua các năm.");
                }).always(function () {
                    hideLoading('#annualProfitChartContainer');
                });
            }

            function loadWasteData(year) {
                if (!year) return;
                showLoading('#topWastedContainer');
                const url = `@Url.Action("GetWasteDetailsByYear", "Inventory")?year=${year}`;
                $.get(url).done(function (data) {
                    populateWastedIngredientsTable(data);
                }).fail(function () {
                    showErrorAlert("Lỗi", `Không thể tải dữ liệu thất thoát cho năm ${year}.`);
                }).always(function () {
                    hideLoading('#topWastedContainer');
                });
            }

            function drawPieChart(data) {
                if (inventoryValuePieChart instanceof Chart) inventoryValuePieChart.destroy();
                const ctx = document.getElementById('inventoryValuePieChart').getContext('2d');
                inventoryValuePieChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.map(d => d.label),
                        datasets: [{ data: data.map(d => d.value), backgroundColor: ['#5d87ff', '#13deb9', '#ffab00', '#ff5449', '#986dff', '#36b9cc', '#f6c23e'] }]
                    },
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: { legend: { position: 'bottom', labels: { boxWidth: 12, padding: 15 } }, tooltip: { callbacks: { label: (c) => `${c.label}: ${formatCurrencyFull(c.parsed)}` } } }
                    }
                });
            }

            function drawLowStockChart(data) {
                if (lowStockChart instanceof Chart) lowStockChart.destroy();
                const container = $('#lowStockChartContainer');
                container.empty().html('<canvas id="lowStockChart"></canvas>');
                const ctx = document.getElementById('lowStockChart').getContext('2d');
                if (!data || data.length === 0) {
                    container.html('<div class="d-flex align-items-center justify-content-center h-100"><div class="alert alert-success text-center p-4 m-0"><i class="bi bi-check-circle-fill fs-2"></i><p class="mt-2 mb-0">Tuyệt vời! Không có NVL nào dưới định mức.</p></div></div>');
                    return;
                }
                const chartData = data.slice(0, 7).reverse();
                lowStockChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: chartData.map(d => `${d.name} (${d.unitOfMeasure || ''})`),
                        datasets: [
                            { label: 'Tồn kho hiện tại', data: chartData.map(d => d.currentStock), backgroundColor: 'rgba(255, 171, 0, 0.7)' },
                            { label: 'Tồn tối thiểu', data: chartData.map(d => d.minimumStock), backgroundColor: 'rgba(255, 84, 73, 0.7)' }
                        ]
                    },
                    options: {
                        indexAxis: 'y', responsive: true, maintainAspectRatio: false,
                        scales: {
                            x: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function (value, index, ticks) {
                                        return formatDynamicNumber(value);
                                    }
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: (c) => {
                                        const dataIndex = c.dataIndex;
                                        const unit = chartData[dataIndex].unitOfMeasure || '';
                                        return `${c.dataset.label}: ${formatDynamicNumber(c.parsed.x)} ${unit}`;
                                    }
                                }
                            }
                        }
                    }
                });
            }

            function populateWastedIngredientsTable(data) {
                const container = $('#topWastedContainer');
                const tableHtml = `<table class="table table-sm table-hover">
                                   <thead class="table-light" style="position: sticky; top: 0;">
                                       <tr>
                                           <th scope="col">#</th>
                                           <th scope="col">Tên NVL</th>
                                           <th scope="col" class="text-end">SL</th>
                                           <th scope="col">ĐVT</th>
                                           <th scope="col" class="text-end">Giá trị</th>
                                       </tr>
                                   </thead>
                                   <tbody id="topWastedTableBody"></tbody>
                               </table>`;
                container.html(tableHtml);
                const tbody = $('#topWastedTableBody');

                if (!data || data.length === 0) {
                    const noDataHtml = '<tr><td colspan="5"><div class="alert alert-info text-center p-4 m-0"><i class="bi bi-shield-check fs-2"></i><p class="mt-2 mb-0">Không có dữ liệu thất thoát trong năm đã chọn.</p></div></td></tr>';
                    tbody.html(noDataHtml);
                    return;
                }

                $.each(data, function (index, item) {
                    const row = `<tr>
                                <th scope="row">${index + 1}</th>
                                <td>${item.name}</td>
                                <td class="text-end">${formatDynamicNumber(item.quantity)}</td>
                                <td>${item.unitOfMeasure || ''}</td>
                                <td class="text-end text-danger fw-semibold">${formatCurrencyFull(item.value)}</td>
                           </tr>`;
                    tbody.append(row);
                });
            }


            // --- E. KHỞI TẠO VÀ GÁN SỰ KIỆN KHI TRANG TẢI XONG ---

            initializeDynamicTitles();

            const currentYear = new Date().getFullYear();
            for (let i = 0; i < 5; i++) {
                $('#profit-chart-year-select').append(`<option value="${currentYear - i}">${currentYear - i}</option>`);
            }

            $('#profit-chart-year-select').on('change', function () {
                const selectedYear = $(this).val();
                loadAnnualProfitChart(selectedYear);
                loadWasteData(selectedYear);
            });

            $('#dashboard-tab-btn').on('shown.bs.tab', function (e) {
                loadDashboardData();
                const selectedYear = $('#profit-chart-year-select').val();
                loadAnnualProfitChart(selectedYear);
                loadWasteData(selectedYear);
                loadAnnualProfitSummaryChart();
            });

            // Tải dữ liệu lần đầu khi trang được mở
            loadDashboardData();
            loadAnnualProfitChart(currentYear);
            loadWasteData(currentYear);
            loadAnnualProfitSummaryChart();
        });
    </script>
}